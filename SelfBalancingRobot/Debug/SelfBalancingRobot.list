
SelfBalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069fc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006b98  08006b98  00016b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c28  08006c28  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c30  08006c30  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000078  08006cb0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08006cb0  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154a2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003312  00000000  00000000  0003554a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00039940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019afc  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016197  00000000  00000000  0005439c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a32e  00000000  00000000  0006a533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  001048b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006b7c 	.word	0x08006b7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08006b7c 	.word	0x08006b7c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96e 	b.w	8000e44 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468c      	mov	ip, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 8083 	bne.w	8000c96 <__udivmoddi4+0x116>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d947      	bls.n	8000c26 <__udivmoddi4+0xa6>
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b142      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	f1c2 0020 	rsb	r0, r2, #32
 8000ba0:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4097      	lsls	r7, r2
 8000ba8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bac:	4094      	lsls	r4, r2
 8000bae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bb2:	0c23      	lsrs	r3, r4, #16
 8000bb4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb8:	fa1f fe87 	uxth.w	lr, r7
 8000bbc:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x60>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 8119 	bcs.w	8000e08 <__udivmoddi4+0x288>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 8116 	bls.w	8000e08 <__udivmoddi4+0x288>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x8c>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	f080 8105 	bcs.w	8000e0c <__udivmoddi4+0x28c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f240 8102 	bls.w	8000e0c <__udivmoddi4+0x28c>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	443c      	add	r4, r7
 8000c0c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c10:	eba4 040e 	sub.w	r4, r4, lr
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa0>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	b902      	cbnz	r2, 8000c2a <__udivmoddi4+0xaa>
 8000c28:	deff      	udf	#255	; 0xff
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d150      	bne.n	8000cd4 <__udivmoddi4+0x154>
 8000c32:	1bcb      	subs	r3, r1, r7
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	fa1f f887 	uxth.w	r8, r7
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c42:	0c21      	lsrs	r1, r4, #16
 8000c44:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0xe4>
 8000c54:	1879      	adds	r1, r7, r1
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0xe2>
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	f200 80e9 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1ac9      	subs	r1, r1, r3
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c70:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x10c>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x10a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80d9 	bhi.w	8000e3c <__udivmoddi4+0x2bc>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e7bf      	b.n	8000c16 <__udivmoddi4+0x96>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0x12e>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80b1 	beq.w	8000e02 <__udivmoddi4+0x282>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x1cc>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0x140>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80b8 	bhi.w	8000e30 <__udivmoddi4+0x2b0>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	468c      	mov	ip, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0a8      	beq.n	8000c20 <__udivmoddi4+0xa0>
 8000cce:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cdc:	4097      	lsls	r7, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce6:	40d9      	lsrs	r1, r3
 8000ce8:	4330      	orrs	r0, r6
 8000cea:	0c03      	lsrs	r3, r0, #16
 8000cec:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f108 	mul.w	r1, r6, r8
 8000d00:	4299      	cmp	r1, r3
 8000d02:	fa04 f402 	lsl.w	r4, r4, r2
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x19c>
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d0e:	f080 808d 	bcs.w	8000e2c <__udivmoddi4+0x2ac>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 808a 	bls.w	8000e2c <__udivmoddi4+0x2ac>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	443b      	add	r3, r7
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b281      	uxth	r1, r0
 8000d20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb00 f308 	mul.w	r3, r0, r8
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x1c4>
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d3a:	d273      	bcs.n	8000e24 <__udivmoddi4+0x2a4>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d971      	bls.n	8000e24 <__udivmoddi4+0x2a4>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4439      	add	r1, r7
 8000d44:	1acb      	subs	r3, r1, r3
 8000d46:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d4a:	e778      	b.n	8000c3e <__udivmoddi4+0xbe>
 8000d4c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d50:	fa03 f406 	lsl.w	r4, r3, r6
 8000d54:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d58:	431c      	orrs	r4, r3
 8000d5a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d66:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	0c3b      	lsrs	r3, r7, #16
 8000d6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d72:	fa1f f884 	uxth.w	r8, r4
 8000d76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d7e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d82:	458a      	cmp	sl, r1
 8000d84:	fa02 f206 	lsl.w	r2, r2, r6
 8000d88:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x220>
 8000d8e:	1861      	adds	r1, r4, r1
 8000d90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d94:	d248      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000d96:	458a      	cmp	sl, r1
 8000d98:	d946      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000d9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9e:	4421      	add	r1, r4
 8000da0:	eba1 010a 	sub.w	r1, r1, sl
 8000da4:	b2bf      	uxth	r7, r7
 8000da6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000daa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000db2:	fb00 f808 	mul.w	r8, r0, r8
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x24a>
 8000dba:	19e7      	adds	r7, r4, r7
 8000dbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc0:	d22e      	bcs.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc2:	45b8      	cmp	r8, r7
 8000dc4:	d92c      	bls.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4427      	add	r7, r4
 8000dca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dce:	eba7 0708 	sub.w	r7, r7, r8
 8000dd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd6:	454f      	cmp	r7, r9
 8000dd8:	46c6      	mov	lr, r8
 8000dda:	4649      	mov	r1, r9
 8000ddc:	d31a      	bcc.n	8000e14 <__udivmoddi4+0x294>
 8000dde:	d017      	beq.n	8000e10 <__udivmoddi4+0x290>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x27a>
 8000de2:	ebb3 020e 	subs.w	r2, r3, lr
 8000de6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dea:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dee:	40f2      	lsrs	r2, r6
 8000df0:	ea4c 0202 	orr.w	r2, ip, r2
 8000df4:	40f7      	lsrs	r7, r6
 8000df6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e70b      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0x60>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6fd      	b.n	8000c0c <__udivmoddi4+0x8c>
 8000e10:	4543      	cmp	r3, r8
 8000e12:	d2e5      	bcs.n	8000de0 <__udivmoddi4+0x260>
 8000e14:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e18:	eb69 0104 	sbc.w	r1, r9, r4
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7df      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e7d2      	b.n	8000dca <__udivmoddi4+0x24a>
 8000e24:	4660      	mov	r0, ip
 8000e26:	e78d      	b.n	8000d44 <__udivmoddi4+0x1c4>
 8000e28:	4681      	mov	r9, r0
 8000e2a:	e7b9      	b.n	8000da0 <__udivmoddi4+0x220>
 8000e2c:	4666      	mov	r6, ip
 8000e2e:	e775      	b.n	8000d1c <__udivmoddi4+0x19c>
 8000e30:	4630      	mov	r0, r6
 8000e32:	e74a      	b.n	8000cca <__udivmoddi4+0x14a>
 8000e34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e38:	4439      	add	r1, r7
 8000e3a:	e713      	b.n	8000c64 <__udivmoddi4+0xe4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	443c      	add	r4, r7
 8000e40:	e724      	b.n	8000c8c <__udivmoddi4+0x10c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <PID>:
 * @param pitch	pitch read from MPU6050
 * @param dt interval time between two MPU6050 read
 * @param pid_flag use a PID control law if this flag is 1 else use a PI law
 * @retval pwm compute from control law
 */
int PID(float ref, float pitch, float dt, uint8_t pid_flag) {
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e56:	ed87 1a01 	vstr	s2, [r7, #4]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	70fb      	strb	r3, [r7, #3]
	float P, D, pid_pwm;

	//calculate error
	float error = ref - pitch;
 8000e5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6a:	edc7 7a07 	vstr	s15, [r7, #28]

	//calculate Proportional term
	P = Kp * error;
 8000e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e72:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8000e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7a:	edc7 7a06 	vstr	s15, [r7, #24]

////	calculate Integral term. Account for wind-up
	if(pid_flag==1)
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10e      	bne.n	8000ea2 <PID+0x5a>
		I+=Ki* error ;
 8000e84:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e88:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000e8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e90:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <PID+0x15c>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9a:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <PID+0x15c>)
 8000e9c:	edc3 7a00 	vstr	s15, [r3]
 8000ea0:	e01d      	b.n	8000ede <PID+0x96>
	else
		I+=0.5*error; // If the robot has to move the Ki term should be lower so there are less oscillation
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <PID+0x15c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fafa 	bl	80004a0 <__aeabi_f2d>
 8000eac:	4604      	mov	r4, r0
 8000eae:	460d      	mov	r5, r1
 8000eb0:	69f8      	ldr	r0, [r7, #28]
 8000eb2:	f7ff faf5 	bl	80004a0 <__aeabi_f2d>
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <PID+0x160>)
 8000ebc:	f7ff fb48 	bl	8000550 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	f7ff f98c 	bl	80001e4 <__adddf3>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fdec 	bl	8000ab0 <__aeabi_d2f>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <PID+0x15c>)
 8000edc:	6013      	str	r3, [r2, #0]

	if (I > MAX_PWM)
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <PID+0x15c>)
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000fac <PID+0x164>
 8000ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef0:	dd03      	ble.n	8000efa <PID+0xb2>
		I = MAX_PWM;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <PID+0x15c>)
 8000ef4:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <PID+0x168>)
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e00c      	b.n	8000f14 <PID+0xcc>
	else if (I<MIN_PWM){
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <PID+0x15c>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000fb4 <PID+0x16c>
 8000f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0c:	d502      	bpl.n	8000f14 <PID+0xcc>
		I=MIN_PWM;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <PID+0x15c>)
 8000f10:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <PID+0x170>)
 8000f12:	601a      	str	r2, [r3, #0]
	}

	////calculate Derivative term
	D = -Kd * (error - lastError);
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <PID+0x174>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f22:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8000f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// If the robot has to move the control low is PI so the movement is more fluid
	if(pid_flag == 0){
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <PID+0xf2>
		D = 0;
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
	}

	//total PID value
	pid_pwm = P + I + D;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <PID+0x15c>)
 8000f3c:	ed93 7a00 	vldr	s14, [r3]
 8000f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	edc7 7a05 	vstr	s15, [r7, #20]

	//max sure pwm is bound between allowed min/max thresholds

	int out_pwm = (int) pid_pwm;
 8000f54:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5c:	ee17 3a90 	vmov	r3, s15
 8000f60:	623b      	str	r3, [r7, #32]
	if (pid_pwm > MAX_PWM)
 8000f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f66:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000fac <PID+0x164>
 8000f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	dd02      	ble.n	8000f7a <PID+0x132>
		out_pwm = MAX_PWM;
 8000f74:	2346      	movs	r3, #70	; 0x46
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	e00b      	b.n	8000f92 <PID+0x14a>
	else if (pid_pwm < MIN_PWM)
 8000f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000fb4 <PID+0x16c>
 8000f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	d502      	bpl.n	8000f92 <PID+0x14a>
		out_pwm = MIN_PWM;
 8000f8c:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8000f90:	623b      	str	r3, [r7, #32]

	lastError = error;
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <PID+0x174>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	6013      	str	r3, [r2, #0]

	return out_pwm;
 8000f98:	6a3b      	ldr	r3, [r7, #32]

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000098 	.word	0x20000098
 8000fa8:	3fe00000 	.word	0x3fe00000
 8000fac:	428c0000 	.word	0x428c0000
 8000fb0:	428c0000 	.word	0x428c0000
 8000fb4:	c28c0000 	.word	0xc28c0000
 8000fb8:	c28c0000 	.word	0xc28c0000
 8000fbc:	20000094 	.word	0x20000094

08000fc0 <set_accel_axes>:
 * @param a accelerometer data structure
 * @param ax raw data read from accelerometer x axis
 * @param ay raw data read from accelerometer y axis
 * @param az raw data read from accelerometer z axis
 */
void set_accel_axes(accel_t* a, int16_t ax, int16_t ay, int16_t az){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	817b      	strh	r3, [r7, #10]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	813b      	strh	r3, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	80fb      	strh	r3, [r7, #6]
	a->ax=ax;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	897a      	ldrh	r2, [r7, #10]
 8000fde:	801a      	strh	r2, [r3, #0]
	a->ay=ay;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	893a      	ldrh	r2, [r7, #8]
 8000fe4:	805a      	strh	r2, [r3, #2]
	a->az=az;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	809a      	strh	r2, [r3, #4]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <get_ax>:
/**
 * @brief Gets raw data read from  accelerometer x axis
 * @param a accelerometer data structure
 * @retval raw data read from accelerometer x axis
 */
int16_t get_ax(accel_t* a){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	return a->ax;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <get_ay>:
/**
 * @brief Gets raw data read from  accelerometer y axis
 * @param a accelerometer data structure
 * @retval raw data read from accelerometer y axis
 */
int16_t get_ay(accel_t* a){
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	return a->ay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <get_az>:
/**
 * @brief Gets raw data read from  accelerometer z axis
 * @param a accelerometer data structure
 * @retval raw data read from accelerometer z axis
 */
int16_t get_az(accel_t* a){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	return a->az;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_ADC1_Init+0x98>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <MX_ADC1_Init+0x9c>)
 800105e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800106c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_ADC1_Init+0x98>)
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <MX_ADC1_Init+0xa0>)
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001096:	2201      	movs	r2, #1
 8001098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC1_Init+0x98>)
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010aa:	f001 fba5 	bl	80027f8 <HAL_ADC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010b4:	f000 fd14 	bl	8001ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010ca:	f001 fcdd 	bl	8002a88 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010d4:	f000 fd04 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000b4 	.word	0x200000b4
 80010e4:	40012000 	.word	0x40012000
 80010e8:	0f000001 	.word	0x0f000001

080010ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <HAL_ADC_MspInit+0xdc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d157      	bne.n	80011be <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_ADC_MspInit+0xe0>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a2d      	ldr	r2, [pc, #180]	; (80011cc <HAL_ADC_MspInit+0xe0>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_ADC_MspInit+0xe0>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_ADC_MspInit+0xe0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a26      	ldr	r2, [pc, #152]	; (80011cc <HAL_ADC_MspInit+0xe0>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_ADC_MspInit+0xe0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001146:	2301      	movs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	481d      	ldr	r0, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0xe4>)
 800115a:	f002 fbb7 	bl	80038cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001160:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_ADC_MspInit+0xec>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001178:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001184:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001188:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 80011a4:	f002 f822 	bl	80031ec <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011ae:	f000 fc97 	bl	8001ae0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 80011b6:	639a      	str	r2, [r3, #56]	; 0x38
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_ADC_MspInit+0xe8>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	200000fc 	.word	0x200000fc
 80011d8:	40026410 	.word	0x40026410
 80011dc:	00000000 	.word	0x00000000

080011e0 <get_Accel_pitch>:
 * @param ay acceleration computes from y axis
 * @param az acceleration computes from z axis
 * @retval pitch angle computer from accelerometer values
 *
 */
float get_Accel_pitch(float ax, float ay, float az) {
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80011ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80011ee:	ed87 1a01 	vstr	s2, [r7, #4]
	return atan2(ax, sqrt(ay*ay + az*az)) * (180 / M_PI);
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff f954 	bl	80004a0 <__aeabi_f2d>
 80011f8:	4604      	mov	r4, r0
 80011fa:	460d      	mov	r5, r1
 80011fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001200:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001204:	edd7 7a01 	vldr	s15, [r7, #4]
 8001208:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800120c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001210:	ee17 0a90 	vmov	r0, s15
 8001214:	f7ff f944 	bl	80004a0 <__aeabi_f2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	ec43 2b10 	vmov	d0, r2, r3
 8001220:	f005 f94c 	bl	80064bc <sqrt>
 8001224:	eeb0 7a40 	vmov.f32	s14, s0
 8001228:	eef0 7a60 	vmov.f32	s15, s1
 800122c:	eeb0 1a47 	vmov.f32	s2, s14
 8001230:	eef0 1a67 	vmov.f32	s3, s15
 8001234:	ec45 4b10 	vmov	d0, r4, r5
 8001238:	f005 f93e 	bl	80064b8 <atan2>
 800123c:	ec51 0b10 	vmov	r0, r1, d0
 8001240:	a309      	add	r3, pc, #36	; (adr r3, 8001268 <get_Accel_pitch+0x88>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff f983 	bl	8000550 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc2d 	bl	8000ab0 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	ee07 3a90 	vmov	s15, r3
}
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bdb0      	pop	{r4, r5, r7, pc}
 8001266:	bf00      	nop
 8001268:	1a63c1f8 	.word	0x1a63c1f8
 800126c:	404ca5dc 	.word	0x404ca5dc

08001270 <get_pitch_accel_error>:

/**
 * @brief Gets pitch accelerometer error
 * @retval pitch accelerometer error
 */
float get_pitch_accel_error(){
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	return pitch_accel_error;
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <get_pitch_accel_error+0x18>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	ee07 3a90 	vmov	s15, r3
}
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	2000009c 	.word	0x2000009c

0800128c <get_pitch_gyro_error>:

/**
 * @brief Gets pitch gyroscope error
 * @retval pitch gyroscope error
 */
float get_pitch_gyro_error(){
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	return pitch_gyro_error;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <get_pitch_gyro_error+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
}
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200000a0 	.word	0x200000a0

080012a8 <__handle_pitch>:
float pitch =0;

/**
 * @brief Manages control law according  direction
 */
void __handle_pitch(){
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
	int8_t dir;
	int pwm;
	float inc=1.25;
 80012ae:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <__handle_pitch+0x234>)
 80012b0:	613b      	str	r3, [r7, #16]
	float inc_for= inc+0.25;
 80012b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80012ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012be:	edc7 7a03 	vstr	s15, [r7, #12]
	float inc_stop=0.5;
 80012c2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80012c6:	60bb      	str	r3, [r7, #8]
	dir = get_direction();
 80012c8:	f000 fc7e 	bl	8001bc8 <get_direction>
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
	float angle=0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]

	// Set reference angle as the first angle read from MPU6050
	if (first_read){
 80012d6:	4b82      	ldr	r3, [pc, #520]	; (80014e0 <__handle_pitch+0x238>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <__handle_pitch+0x44>
		ref = pitch;
 80012de:	4b81      	ldr	r3, [pc, #516]	; (80014e4 <__handle_pitch+0x23c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a81      	ldr	r2, [pc, #516]	; (80014e8 <__handle_pitch+0x240>)
 80012e4:	6013      	str	r3, [r2, #0]
		first_read = false;
 80012e6:	4b7e      	ldr	r3, [pc, #504]	; (80014e0 <__handle_pitch+0x238>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	}


	if(dir == STOP){
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f040 809f 	bne.w	8001434 <__handle_pitch+0x18c>
		if(prev_dir == BACKWARD || pitch<(ref-0.75)){
 80012f6:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <__handle_pitch+0x244>)
 80012f8:	f993 3000 	ldrsb.w	r3, [r3]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d019      	beq.n	8001336 <__handle_pitch+0x8e>
 8001302:	4b78      	ldr	r3, [pc, #480]	; (80014e4 <__handle_pitch+0x23c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8ca 	bl	80004a0 <__aeabi_f2d>
 800130c:	4604      	mov	r4, r0
 800130e:	460d      	mov	r5, r1
 8001310:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <__handle_pitch+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8c3 	bl	80004a0 <__aeabi_f2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <__handle_pitch+0x248>)
 8001320:	f7fe ff5e 	bl	80001e0 <__aeabi_dsub>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7ff fb82 	bl	8000a34 <__aeabi_dcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d020      	beq.n	8001378 <__handle_pitch+0xd0>
			// define a lower angle helping to balance the robot when the angle read
			// from MPU is lower then reference angle or previous direction is BACKWARD
			angle = pitch-inc_stop;
 8001336:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <__handle_pitch+0x23c>)
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001344:	edc7 7a05 	vstr	s15, [r7, #20]
			pwm = PID(ref, angle, DT,MOVEMENT_PID_FLAG);
 8001348:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <__handle_pitch+0x240>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	2000      	movs	r0, #0
 8001350:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80014f4 <__handle_pitch+0x24c>
 8001354:	edd7 0a05 	vldr	s1, [r7, #20]
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f7ff fd74 	bl	8000e48 <PID>
 8001360:	6038      	str	r0, [r7, #0]
			motorMove(pwm, angle,ref);
 8001362:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <__handle_pitch+0x240>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eef0 0a67 	vmov.f32	s1, s15
 800136c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f000 fc49 	bl	8001c08 <motorMove>
 8001376:	e0a7      	b.n	80014c8 <__handle_pitch+0x220>

		}else if (prev_dir == FORWARD || pitch>(ref+0.75)){
 8001378:	4b5c      	ldr	r3, [pc, #368]	; (80014ec <__handle_pitch+0x244>)
 800137a:	f993 3000 	ldrsb.w	r3, [r3]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d019      	beq.n	80013b6 <__handle_pitch+0x10e>
 8001382:	4b58      	ldr	r3, [pc, #352]	; (80014e4 <__handle_pitch+0x23c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f88a 	bl	80004a0 <__aeabi_f2d>
 800138c:	4604      	mov	r4, r0
 800138e:	460d      	mov	r5, r1
 8001390:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <__handle_pitch+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f883 	bl	80004a0 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <__handle_pitch+0x248>)
 80013a0:	f7fe ff20 	bl	80001e4 <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff fb60 	bl	8000a70 <__aeabi_dcmpgt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d020      	beq.n	80013f8 <__handle_pitch+0x150>
			// define a greater angle helping to balance the robot when the angle read
			// from MPU is greater then reference angle or previous direction is FORWARD
			angle = pitch+inc_stop;
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <__handle_pitch+0x23c>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80013c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c4:	edc7 7a05 	vstr	s15, [r7, #20]
			pwm = PID(ref, angle, DT,MOVEMENT_PID_FLAG);
 80013c8:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <__handle_pitch+0x240>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	2000      	movs	r0, #0
 80013d0:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80014f4 <__handle_pitch+0x24c>
 80013d4:	edd7 0a05 	vldr	s1, [r7, #20]
 80013d8:	eeb0 0a67 	vmov.f32	s0, s15
 80013dc:	f7ff fd34 	bl	8000e48 <PID>
 80013e0:	6038      	str	r0, [r7, #0]
			motorMove(pwm, angle,ref);
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <__handle_pitch+0x240>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	eef0 0a67 	vmov.f32	s1, s15
 80013ec:	ed97 0a05 	vldr	s0, [r7, #20]
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	f000 fc09 	bl	8001c08 <motorMove>
 80013f6:	e067      	b.n	80014c8 <__handle_pitch+0x220>
		}else{
			pwm = PID(ref, pitch, DT,STOP_PID_FLAG);
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <__handle_pitch+0x240>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <__handle_pitch+0x23c>)
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	2001      	movs	r0, #1
 8001406:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80014f4 <__handle_pitch+0x24c>
 800140a:	eef0 0a47 	vmov.f32	s1, s14
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	f7ff fd19 	bl	8000e48 <PID>
 8001416:	6038      	str	r0, [r7, #0]
			motorMove(pwm, pitch,ref);
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <__handle_pitch+0x23c>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <__handle_pitch+0x240>)
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	eef0 0a47 	vmov.f32	s1, s14
 8001428:	eeb0 0a67 	vmov.f32	s0, s15
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f000 fbeb 	bl	8001c08 <motorMove>
 8001432:	e049      	b.n	80014c8 <__handle_pitch+0x220>
		}

	}

	else if(dir==BACKWARD ){
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d120      	bne.n	8001480 <__handle_pitch+0x1d8>
		// define a lower angle helping to move the robot when the direction is BACKWARD
		angle=pitch-inc;
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <__handle_pitch+0x23c>)
 8001440:	ed93 7a00 	vldr	s14, [r3]
 8001444:	edd7 7a04 	vldr	s15, [r7, #16]
 8001448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144c:	edc7 7a05 	vstr	s15, [r7, #20]
		pwm = PID(ref, angle, DT,MOVEMENT_PID_FLAG);
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <__handle_pitch+0x240>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	2000      	movs	r0, #0
 8001458:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80014f4 <__handle_pitch+0x24c>
 800145c:	edd7 0a05 	vldr	s1, [r7, #20]
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f7ff fcf0 	bl	8000e48 <PID>
 8001468:	6038      	str	r0, [r7, #0]
		motorMove(pwm, angle,ref);
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <__handle_pitch+0x240>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eef0 0a67 	vmov.f32	s1, s15
 8001474:	ed97 0a05 	vldr	s0, [r7, #20]
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f000 fbc5 	bl	8001c08 <motorMove>
 800147e:	e023      	b.n	80014c8 <__handle_pitch+0x220>

	}
	else if(dir==FORWARD){
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d11f      	bne.n	80014c8 <__handle_pitch+0x220>
		// define a greater angle helping to balance the robot when the direction is FORWARD
		angle = pitch + inc_for;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <__handle_pitch+0x23c>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a05 	vstr	s15, [r7, #20]
		pwm = PID(ref, angle, DT,MOVEMENT_PID_FLAG);
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <__handle_pitch+0x240>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	2000      	movs	r0, #0
 80014a2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80014f4 <__handle_pitch+0x24c>
 80014a6:	edd7 0a05 	vldr	s1, [r7, #20]
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	f7ff fccb 	bl	8000e48 <PID>
 80014b2:	6038      	str	r0, [r7, #0]
		motorMove(pwm, angle,ref);
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__handle_pitch+0x240>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	eef0 0a67 	vmov.f32	s1, s15
 80014be:	ed97 0a05 	vldr	s0, [r7, #20]
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f000 fba0 	bl	8001c08 <motorMove>

	}
	last_angle = angle;
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <__handle_pitch+0x250>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	6013      	str	r3, [r2, #0]
	prev_dir=dir;
 80014ce:	4a07      	ldr	r2, [pc, #28]	; (80014ec <__handle_pitch+0x244>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	7013      	strb	r3, [r2, #0]
//	if(dir == BACKWARD)
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//	else if (dir == FORWARD)
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bdb0      	pop	{r4, r5, r7, pc}
 80014dc:	3fa00000 	.word	0x3fa00000
 80014e0:	20000000 	.word	0x20000000
 80014e4:	200000ac 	.word	0x200000ac
 80014e8:	2000015c 	.word	0x2000015c
 80014ec:	200000a8 	.word	0x200000a8
 80014f0:	3fe80000 	.word	0x3fe80000
 80014f4:	3ba3d70a 	.word	0x3ba3d70a
 80014f8:	200000a4 	.word	0x200000a4
 80014fc:	00000000 	.word	0x00000000

08001500 <execute_control>:


/**
 * @brief Read data from MPU6050 and compute control law
 */
void execute_control(){
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	ed2d 8b02 	vpush	{d8}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
	float ax;
	float gy, ay;
	float az;

	float pitch_gyro = 0, pitch_accel = 0;
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	613b      	str	r3, [r7, #16]

	if (MPU6050_retrieve_data() == MPU6050_OK) {
 8001516:	f000 fcf9 	bl	8001f0c <MPU6050_retrieve_data>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 809c 	bne.w	800165a <execute_control+0x15a>
		MPU6050_save_data();
 8001522:	f000 fd17 	bl	8001f54 <MPU6050_save_data>
		gy = MPU6050_get_gy()/ SENSITIVITY_GYRO;
 8001526:	f000 fd71 	bl	800200c <MPU6050_get_gy>
 800152a:	4603      	mov	r3, r0
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001534:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001680 <execute_control+0x180>
 8001538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153c:	edc7 7a03 	vstr	s15, [r7, #12]
		ax = MPU6050_get_ax()/ SENSITIVITY_ACCEL;
 8001540:	f000 fd6e 	bl	8002020 <MPU6050_get_ax>
 8001544:	4603      	mov	r3, r0
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001684 <execute_control+0x184>
 8001552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001556:	edc7 7a02 	vstr	s15, [r7, #8]
		ay = MPU6050_get_ay()/ SENSITIVITY_ACCEL;
 800155a:	f000 fd6b 	bl	8002034 <MPU6050_get_ay>
 800155e:	4603      	mov	r3, r0
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001568:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001684 <execute_control+0x184>
 800156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001570:	edc7 7a01 	vstr	s15, [r7, #4]
		az = MPU6050_get_az()/ SENSITIVITY_ACCEL;
 8001574:	f000 fd68 	bl	8002048 <MPU6050_get_az>
 8001578:	4603      	mov	r3, r0
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001582:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001684 <execute_control+0x184>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	edc7 7a00 	vstr	s15, [r7]

		pitch_accel = get_Accel_pitch(ax, ay, az) - get_pitch_accel_error();
 800158e:	ed97 1a00 	vldr	s2, [r7]
 8001592:	edd7 0a01 	vldr	s1, [r7, #4]
 8001596:	ed97 0a02 	vldr	s0, [r7, #8]
 800159a:	f7ff fe21 	bl	80011e0 <get_Accel_pitch>
 800159e:	eeb0 8a40 	vmov.f32	s16, s0
 80015a2:	f7ff fe65 	bl	8001270 <get_pitch_accel_error>
 80015a6:	eef0 7a40 	vmov.f32	s15, s0
 80015aa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80015ae:	edc7 7a04 	vstr	s15, [r7, #16]
		pitch_gyro = pitch + (gy - get_pitch_gyro_error()) * DT;
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <execute_control+0x188>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff72 	bl	80004a0 <__aeabi_f2d>
 80015bc:	4604      	mov	r4, r0
 80015be:	460d      	mov	r5, r1
 80015c0:	f7ff fe64 	bl	800128c <get_pitch_gyro_error>
 80015c4:	eeb0 7a40 	vmov.f32	s14, s0
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015d0:	ee17 0a90 	vmov	r0, s15
 80015d4:	f7fe ff64 	bl	80004a0 <__aeabi_f2d>
 80015d8:	a323      	add	r3, pc, #140	; (adr r3, 8001668 <execute_control+0x168>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe ffb7 	bl	8000550 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fdfb 	bl	80001e4 <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fa5b 	bl	8000ab0 <__aeabi_d2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	617b      	str	r3, [r7, #20]
		pitch = CF_OFFSET_GYRO * pitch_gyro + CF_OFFSET_ACCEL * pitch_accel;
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7fe ff4e 	bl	80004a0 <__aeabi_f2d>
 8001604:	a31a      	add	r3, pc, #104	; (adr r3, 8001670 <execute_control+0x170>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe ffa1 	bl	8000550 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4614      	mov	r4, r2
 8001614:	461d      	mov	r5, r3
 8001616:	6938      	ldr	r0, [r7, #16]
 8001618:	f7fe ff42 	bl	80004a0 <__aeabi_f2d>
 800161c:	a316      	add	r3, pc, #88	; (adr r3, 8001678 <execute_control+0x178>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe ff95 	bl	8000550 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7fe fdd9 	bl	80001e4 <__adddf3>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fa39 	bl	8000ab0 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <execute_control+0x188>)
 8001642:	6013      	str	r3, [r2, #0]
		__handle_pitch(pitch);
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <execute_control+0x188>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff29 	bl	80004a0 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	ec43 2b10 	vmov	d0, r2, r3
 8001656:	f7ff fe27 	bl	80012a8 <__handle_pitch>
	}
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	ecbd 8b02 	vpop	{d8}
 8001664:	bdb0      	pop	{r4, r5, r7, pc}
 8001666:	bf00      	nop
 8001668:	47ae147b 	.word	0x47ae147b
 800166c:	3f747ae1 	.word	0x3f747ae1
 8001670:	f5c28f5c 	.word	0xf5c28f5c
 8001674:	3fef5c28 	.word	0x3fef5c28
 8001678:	47ae1480 	.word	0x47ae1480
 800167c:	3f947ae1 	.word	0x3f947ae1
 8001680:	43030000 	.word	0x43030000
 8001684:	46800000 	.word	0x46800000
 8001688:	200000ac 	.word	0x200000ac

0800168c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_DMA_Init+0x3c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <MX_DMA_Init+0x3c>)
 800169c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_DMA_Init+0x3c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2038      	movs	r0, #56	; 0x38
 80016b4:	f001 fd63 	bl	800317e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016b8:	2038      	movs	r0, #56	; 0x38
 80016ba:	f001 fd7c 	bl	80031b6 <HAL_NVIC_EnableIRQ>

}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <MX_GPIO_Init+0xc0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a28      	ldr	r2, [pc, #160]	; (800178c <MX_GPIO_Init+0xc0>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b26      	ldr	r3, [pc, #152]	; (800178c <MX_GPIO_Init+0xc0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <MX_GPIO_Init+0xc0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <MX_GPIO_Init+0xc0>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <MX_GPIO_Init+0xc0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <MX_GPIO_Init+0xc0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a1a      	ldr	r2, [pc, #104]	; (800178c <MX_GPIO_Init+0xc0>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <MX_GPIO_Init+0xc0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2103      	movs	r1, #3
 800173a:	4815      	ldr	r0, [pc, #84]	; (8001790 <MX_GPIO_Init+0xc4>)
 800173c:	f002 fa4a 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2120      	movs	r1, #32
 8001744:	4813      	ldr	r0, [pc, #76]	; (8001794 <MX_GPIO_Init+0xc8>)
 8001746:	f002 fa45 	bl	8003bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800174a:	2303      	movs	r3, #3
 800174c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <MX_GPIO_Init+0xc4>)
 8001762:	f002 f8b3 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001766:	2320      	movs	r3, #32
 8001768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_GPIO_Init+0xc8>)
 800177e:	f002 f8a5 	bl	80038cc <HAL_GPIO_Init>

}
 8001782:	bf00      	nop
 8001784:	3720      	adds	r7, #32
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40020800 	.word	0x40020800
 8001794:	40020000 	.word	0x40020000

08001798 <set_gyro_axes>:
 * @param g gyroscope data structure
 * @param gx raw data read from gyroscope x axis
 * @param gy raw data read from gyroscope y axis
 * @param gz raw data read from gyroscope z axis
 */
void set_gyro_axes(gyro_t* g, int16_t gx, int16_t gy, int16_t gz){
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	817b      	strh	r3, [r7, #10]
 80017aa:	460b      	mov	r3, r1
 80017ac:	813b      	strh	r3, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
	g->gyro_x=gx;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	897a      	ldrh	r2, [r7, #10]
 80017b6:	801a      	strh	r2, [r3, #0]
	g->gyro_y=gy;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	893a      	ldrh	r2, [r7, #8]
 80017bc:	805a      	strh	r2, [r3, #2]
	g->gyro_z=gz;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	809a      	strh	r2, [r3, #4]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <get_gy>:
/**
 * @brief Gets raw data read from gyroscope y axis
 * @param g gyroscope data structure
 * @retval raw data read from gyroscope y axis
 */
int16_t get_gy(gyro_t* g){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	return g->gyro_y;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C2_Init+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <MX_I2C2_Init+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C2_Init+0x50>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_I2C2_Init+0x58>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C2_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_I2C2_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_I2C2_Init+0x50>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <MX_I2C2_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_I2C2_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <MX_I2C2_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_I2C2_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_I2C2_Init+0x50>)
 800182a:	f002 f9ed 	bl	8003c08 <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 f954 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000160 	.word	0x20000160
 8001840:	40005800 	.word	0x40005800
 8001844:	00061a80 	.word	0x00061a80

08001848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_I2C_MspInit+0xa4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d13c      	bne.n	80018e4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_I2C_MspInit+0xa8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_I2C_MspInit+0xa8>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_I2C_MspInit+0xa8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188c:	2312      	movs	r3, #18
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001890:	2301      	movs	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001898:	2304      	movs	r3, #4
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4814      	ldr	r0, [pc, #80]	; (80018f4 <HAL_I2C_MspInit+0xac>)
 80018a4:	f002 f812 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a8:	2308      	movs	r3, #8
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80018b8:	2309      	movs	r3, #9
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <HAL_I2C_MspInit+0xac>)
 80018c4:	f002 f802 	bl	80038cc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_I2C_MspInit+0xa8>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_I2C_MspInit+0xa8>)
 80018d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_I2C_MspInit+0xa8>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	; 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40005800 	.word	0x40005800
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020400 	.word	0x40020400

080018f8 <request_data>:

/**
 * @brief Computes DMA request necessary to read data from joystick
 * @retval Status of the request
 */
int8_t request_data(){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef return_value;
	return_value=HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer, NUMBER_OF_AXIS);
 80018fe:	2201      	movs	r2, #1
 8001900:	4908      	ldr	r1, [pc, #32]	; (8001924 <request_data+0x2c>)
 8001902:	4809      	ldr	r0, [pc, #36]	; (8001928 <request_data+0x30>)
 8001904:	f000 ffbc 	bl	8002880 <HAL_ADC_Start_DMA>
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
	if (return_value != HAL_OK) {
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <request_data+0x20>
		return JOYSTICK_ADC_ERR;
 8001912:	f06f 0301 	mvn.w	r3, #1
 8001916:	e000      	b.n	800191a <request_data+0x22>
	}
	return JOYSTICK_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200000b0 	.word	0x200000b0
 8001928:	200000b4 	.word	0x200000b4

0800192c <save_data>:


/**
 * @brief Stores data read from ADC in joystick
 */
void save_data(){
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	set_x(&joystick,buffer);
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <save_data+0x14>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <save_data+0x18>)
 8001938:	f000 f818 	bl	800196c <set_x>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000b0 	.word	0x200000b0
 8001944:	200001b4 	.word	0x200001b4

08001948 <read_data>:

/**
 * @brief Stores data in specified joystick
 * @param j joystick data structure where store data
 */
void read_data(joystick_c* j){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	set_x(j, get_x(&joystick));
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <read_data+0x20>)
 8001952:	f000 f81a 	bl	800198a <get_x>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f806 	bl	800196c <set_x>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200001b4 	.word	0x200001b4

0800196c <set_x>:
/**
 * @brief Sets x value of specified joystick in input
 * @param x x value
 * @param external joystick data structure
 */
void set_x(joystick_c * j, uint16_t x){
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
	j->x=x;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	801a      	strh	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <get_x>:

/**
 * @brief Gets x value of specified joystick in input
 * @param external joystick data structure
 */
uint16_t get_x(joystick_c* j){
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	return j->x;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	881b      	ldrh	r3, [r3, #0]
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019aa:	f000 fe8f 	bl	80026cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 f837 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f7ff fe8b 	bl	80016cc <MX_GPIO_Init>
  MX_DMA_Init();
 80019b6:	f7ff fe69 	bl	800168c <MX_DMA_Init>
  MX_ADC1_Init();
 80019ba:	f7ff fb45 	bl	8001048 <MX_ADC1_Init>
  MX_I2C2_Init();
 80019be:	f7ff ff15 	bl	80017ec <MX_I2C2_Init>
  MX_TIM1_Init();
 80019c2:	f000 fc41 	bl	8002248 <MX_TIM1_Init>
  MX_TIM3_Init();
 80019c6:	f000 fc97 	bl	80022f8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80019ca:	f000 fce9 	bl	80023a0 <MX_TIM10_Init>
  MX_TIM11_Init();
 80019ce:	f000 fd33 	bl	8002438 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	int8_t mpu_ready;
	do {
		mpu_ready = MPU6050_init();
 80019d2:	f000 f9c1 	bl	8001d58 <MPU6050_init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80019da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019de:	f000 fee7 	bl	80027b0 <HAL_Delay>
	} while (mpu_ready == MPU6050_ERR);
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ea:	d0f2      	beq.n	80019d2 <main+0x2e>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//	set_Gyro_offset(77, -93, -72);
	set_Gyro_offset(82, -101, -76); //Altro MPU
 80019ec:	f64f 72b4 	movw	r2, #65460	; 0xffb4
 80019f0:	f64f 719b 	movw	r1, #65435	; 0xff9b
 80019f4:	2052      	movs	r0, #82	; 0x52
 80019f6:	f000 fb79 	bl	80020ec <set_Gyro_offset>
//	set_Gyro_offset(99, 8, 40);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2120      	movs	r1, #32
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <main+0x70>)
 8001a00:	f002 f8e8 	bl	8003bd4 <HAL_GPIO_WritePin>
	//insert_mpu_in_buffer(mpu);

	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <main+0x74>)
 8001a08:	f003 ff2c 	bl	8005864 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <main+0x78>)
 8001a0e:	f003 fe6d 	bl	80056ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <main+0x6e>
 8001a14:	40020000 	.word	0x40020000
 8001a18:	200001d8 	.word	0x200001d8
 8001a1c:	20000268 	.word	0x20000268

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2230      	movs	r2, #48	; 0x30
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 fd3a 	bl	80064a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <SystemClock_Config+0xb8>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <SystemClock_Config+0xbc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <SystemClock_Config+0xbc>)
 8001a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <SystemClock_Config+0xbc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a80:	2302      	movs	r3, #2
 8001a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 f9a5 	bl	8004de4 <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001aa0:	f000 f81e 	bl	8001ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fc08 	bl	80052d4 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001aca:	f000 f809 	bl	8001ae0 <Error_Handler>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3750      	adds	r7, #80	; 0x50
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <__handler>:

/**
 * @brief management of the phenomenon of hysteresis
 * @retval BACKWARD, STOP or FORWARD
 */
int8_t __handler(uint8_t value){
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]

	if(value>=LOWER_BOUND_H && value<UPPER_BOUND_H){
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2bb3      	cmp	r3, #179	; 0xb3
 8001afa:	d91c      	bls.n	8001b36 <__handler+0x4a>
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2bc7      	cmp	r3, #199	; 0xc7
 8001b00:	d819      	bhi.n	8001b36 <__handler+0x4a>
		if (prev_status == STOP || prev_status == FORWARD){
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <__handler+0xd4>)
 8001b04:	f993 3000 	ldrsb.w	r3, [r3]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <__handler+0x2a>
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <__handler+0xd4>)
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <__handler+0x36>
			status = prev_status;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <__handler+0xd4>)
 8001b18:	f993 2000 	ldrsb.w	r2, [r3]
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <__handler+0xd8>)
 8001b1e:	701a      	strb	r2, [r3, #0]
		if (prev_status == STOP || prev_status == FORWARD){
 8001b20:	e041      	b.n	8001ba6 <__handler+0xba>
		}else if(prev_status == BACKWARD){
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <__handler+0xd4>)
 8001b24:	f993 3000 	ldrsb.w	r3, [r3]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d13b      	bne.n	8001ba6 <__handler+0xba>
			status = STOP;
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <__handler+0xd8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
		if (prev_status == STOP || prev_status == FORWARD){
 8001b34:	e037      	b.n	8001ba6 <__handler+0xba>
		}
	}else if (value>=LOWER_BOUND_L && value < UPPER_BOUND_L){
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b27      	cmp	r3, #39	; 0x27
 8001b3a:	d91c      	bls.n	8001b76 <__handler+0x8a>
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b49      	cmp	r3, #73	; 0x49
 8001b40:	d819      	bhi.n	8001b76 <__handler+0x8a>
		if (prev_status == STOP || prev_status == BACKWARD){
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <__handler+0xd4>)
 8001b44:	f993 3000 	ldrsb.w	r3, [r3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <__handler+0x6c>
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <__handler+0xd4>)
 8001b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	d105      	bne.n	8001b64 <__handler+0x78>
			status = prev_status;
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <__handler+0xd4>)
 8001b5a:	f993 2000 	ldrsb.w	r2, [r3]
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <__handler+0xd8>)
 8001b60:	701a      	strb	r2, [r3, #0]
		if (prev_status == STOP || prev_status == BACKWARD){
 8001b62:	e022      	b.n	8001baa <__handler+0xbe>
		}else if( prev_status == FORWARD){
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <__handler+0xd4>)
 8001b66:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11d      	bne.n	8001baa <__handler+0xbe>
			status = STOP;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <__handler+0xd8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
		if (prev_status == STOP || prev_status == BACKWARD){
 8001b74:	e019      	b.n	8001baa <__handler+0xbe>
		}
	}else if (value >= UPPER_BOUND_H)
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2bc7      	cmp	r3, #199	; 0xc7
 8001b7a:	d903      	bls.n	8001b84 <__handler+0x98>
		status = FORWARD;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <__handler+0xd8>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	e013      	b.n	8001bac <__handler+0xc0>
	else if (value <= LOWER_BOUND_L)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b28      	cmp	r3, #40	; 0x28
 8001b88:	d803      	bhi.n	8001b92 <__handler+0xa6>
		status = BACKWARD;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <__handler+0xd8>)
 8001b8c:	22ff      	movs	r2, #255	; 0xff
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e00c      	b.n	8001bac <__handler+0xc0>
	else if (value < LOWER_BOUND_H && value > UPPER_BOUND_L)
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2bb3      	cmp	r3, #179	; 0xb3
 8001b96:	d809      	bhi.n	8001bac <__handler+0xc0>
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b4a      	cmp	r3, #74	; 0x4a
 8001b9c:	d906      	bls.n	8001bac <__handler+0xc0>
		status = STOP;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <__handler+0xd8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	e002      	b.n	8001bac <__handler+0xc0>
		if (prev_status == STOP || prev_status == FORWARD){
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <__handler+0xc0>
		if (prev_status == STOP || prev_status == BACKWARD){
 8001baa:	bf00      	nop
	return status;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <__handler+0xd8>)
 8001bae:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200000b2 	.word	0x200000b2
 8001bc4:	200000b3 	.word	0x200000b3

08001bc8 <get_direction>:

/**
 * @brief Get joystick direction
 * @retval BACKWARD, STOP or FORWARD
 */
int8_t get_direction(){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	request_data();
 8001bcc:	f7ff fe94 	bl	80018f8 <request_data>
	read_data(&j);
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <get_direction+0x34>)
 8001bd2:	f7ff feb9 	bl	8001948 <read_data>
	__handler(get_x(&j));
 8001bd6:	4809      	ldr	r0, [pc, #36]	; (8001bfc <get_direction+0x34>)
 8001bd8:	f7ff fed7 	bl	800198a <get_x>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff83 	bl	8001aec <__handler>
	prev_status = status;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <get_direction+0x38>)
 8001be8:	f993 2000 	ldrsb.w	r2, [r3]
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <get_direction+0x3c>)
 8001bee:	701a      	strb	r2, [r3, #0]
	return status;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <get_direction+0x38>)
 8001bf2:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200001b8 	.word	0x200001b8
 8001c00:	200000b3 	.word	0x200000b3
 8001c04:	200000b2 	.word	0x200000b2

08001c08 <motorMove>:
 * @brief Handles motor power and direction
 * @param PWM PID controller output
 * @param pitch angle compute through  MPU6050
 * @param ref angle set point of balancing robot
 */
void motorMove(int PWM, float pitch, float ref) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c14:	edc7 0a01 	vstr	s1, [r7, #4]
	int8_t direction;
	uint16_t speed = abs(PWM);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bfb8      	it	lt
 8001c1e:	425b      	neglt	r3, r3
 8001c20:	82bb      	strh	r3, [r7, #20]

	// Direction is based on angle read from MPU6050
	if ( pitch > ref){
 8001c22:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	dd02      	ble.n	8001c3a <motorMove+0x32>
		direction = FORWARD;
 8001c34:	2301      	movs	r3, #1
 8001c36:	75fb      	strb	r3, [r7, #23]
 8001c38:	e00a      	b.n	8001c50 <motorMove+0x48>
	} else if (pitch < ref){
 8001c3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d501      	bpl.n	8001c50 <motorMove+0x48>
		direction = BACKWARD ;
 8001c4c:	23ff      	movs	r3, #255	; 0xff
 8001c4e:	75fb      	strb	r3, [r7, #23]
	}


	if (direction == FORWARD) {
 8001c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d10e      	bne.n	8001c76 <motorMove+0x6e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <motorMove+0xb0>)
 8001c5e:	f001 ffb9 	bl	8003bd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2101      	movs	r1, #1
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <motorMove+0xb0>)
 8001c68:	f001 ffb4 	bl	8003bd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, speed);
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <motorMove+0xb4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	8aba      	ldrh	r2, [r7, #20]
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (direction == STOP) {
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);

	}

}
 8001c74:	e01b      	b.n	8001cae <motorMove+0xa6>
	} else if (direction == BACKWARD) {
 8001c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7e:	d10e      	bne.n	8001c9e <motorMove+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2102      	movs	r1, #2
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <motorMove+0xb0>)
 8001c86:	f001 ffa5 	bl	8003bd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <motorMove+0xb0>)
 8001c90:	f001 ffa0 	bl	8003bd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, speed);
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <motorMove+0xb4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	8aba      	ldrh	r2, [r7, #20]
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c9c:	e007      	b.n	8001cae <motorMove+0xa6>
	} else if (direction == STOP) {
 8001c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <motorMove+0xa6>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <motorMove+0xb4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	200001d8 	.word	0x200001d8

08001cc0 <__MPU6050_read>:
 * @param reg starting register from which read data
 * @param buffer where are stored read data
 * @param size amount of data to read
 * @retval MPU6050 read status
 */
int8_t __MPU6050_read(uint8_t reg, uint8_t *buffer, uint8_t size) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEFAULT_ADDRESS, reg,
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2164      	movs	r1, #100	; 0x64
 8001cda:	9102      	str	r1, [sp, #8]
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	21d0      	movs	r1, #208	; 0xd0
 8001ce6:	4808      	ldr	r0, [pc, #32]	; (8001d08 <__MPU6050_read+0x48>)
 8001ce8:	f002 f9cc 	bl	8004084 <HAL_I2C_Mem_Read>
 8001cec:	4603      	mov	r3, r0
 8001cee:	73fb      	strb	r3, [r7, #15]
	ADDRESS_SIZE, buffer, size, 100);
	if (returnValue != HAL_OK) {
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <__MPU6050_read+0x3c>
		return MPU6050_I2C_ERR;
 8001cf6:	f06f 0301 	mvn.w	r3, #1
 8001cfa:	e000      	b.n	8001cfe <__MPU6050_read+0x3e>
	}
	return MPU6050_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000160 	.word	0x20000160

08001d0c <__MPU6050_write>:
 * @param reg starting register from which write data
 * @param buffer where are stored data to write
 * @param size amount of data to write
 * @retval MPU6050 write status
 */
int8_t __MPU6050_write(uint8_t reg, uint8_t *buffer, uint8_t size) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af04      	add	r7, sp, #16
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_Mem_Write(&hi2c2, MPU6050_DEFAULT_ADDRESS, reg,
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2164      	movs	r1, #100	; 0x64
 8001d26:	9102      	str	r1, [sp, #8]
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	21d0      	movs	r1, #208	; 0xd0
 8001d32:	4808      	ldr	r0, [pc, #32]	; (8001d54 <__MPU6050_write+0x48>)
 8001d34:	f002 f8ac 	bl	8003e90 <HAL_I2C_Mem_Write>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]
	ADDRESS_SIZE, buffer, size, 100);
	if (returnValue != HAL_OK) {
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <__MPU6050_write+0x3c>
		return MPU6050_I2C_ERR;
 8001d42:	f06f 0301 	mvn.w	r3, #1
 8001d46:	e000      	b.n	8001d4a <__MPU6050_write+0x3e>
	}
	return MPU6050_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000160 	.word	0x20000160

08001d58 <MPU6050_init>:

/**
 * @brief MPU6050 initialization function.
 * @retval MPU6050 initialization status
 */
int8_t MPU6050_init() {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_IsDeviceReady(&hi2c2, MPU6050_DEFAULT_ADDRESS, 3,
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	2203      	movs	r2, #3
 8001d64:	21d0      	movs	r1, #208	; 0xd0
 8001d66:	481a      	ldr	r0, [pc, #104]	; (8001dd0 <MPU6050_init+0x78>)
 8001d68:	f002 fbb2 	bl	80044d0 <HAL_I2C_IsDeviceReady>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
			1000);
	if (returnValue != HAL_OK) {
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <MPU6050_init+0x24>
		return MPU6050_ERR;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	e024      	b.n	8001dc6 <MPU6050_init+0x6e>
	}

	if (MPU6050_configuration() == MPU6050_ERR ||
 8001d7c:	f000 f88e 	bl	8001e9c <MPU6050_configuration>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d86:	d01a      	beq.n	8001dbe <MPU6050_init+0x66>
		MPU6050_set_rate_divider(SAMPLE_RATE_DIVIDER) == MPU6050_ERR ||
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 f877 	bl	8001e7c <MPU6050_set_rate_divider>
 8001d8e:	4603      	mov	r3, r0
	if (MPU6050_configuration() == MPU6050_ERR ||
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d013      	beq.n	8001dbe <MPU6050_init+0x66>
		MPU6050_gyro_set_full_scale_range(FS_SCALE) == MPU6050_ERR ||
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f81c 	bl	8001dd4 <MPU6050_gyro_set_full_scale_range>
 8001d9c:	4603      	mov	r3, r0
		MPU6050_set_rate_divider(SAMPLE_RATE_DIVIDER) == MPU6050_ERR ||
 8001d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da2:	d00c      	beq.n	8001dbe <MPU6050_init+0x66>
		MPU6050_accel_set_full_scale_range(AFS_SCALE) == MPU6050_ERR ||
 8001da4:	2000      	movs	r0, #0
 8001da6:	f000 f83f 	bl	8001e28 <MPU6050_accel_set_full_scale_range>
 8001daa:	4603      	mov	r3, r0
		MPU6050_gyro_set_full_scale_range(FS_SCALE) == MPU6050_ERR ||
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <MPU6050_init+0x66>
		MPU6050_DLPF_configuration() == MPU6050_ERR)
 8001db2:	f000 f891 	bl	8001ed8 <MPU6050_DLPF_configuration>
 8001db6:	4603      	mov	r3, r0
		MPU6050_accel_set_full_scale_range(AFS_SCALE) == MPU6050_ERR ||
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d102      	bne.n	8001dc4 <MPU6050_init+0x6c>
		return MPU6050_ERR;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e000      	b.n	8001dc6 <MPU6050_init+0x6e>
	else
		return MPU6050_OK;
 8001dc4:	2300      	movs	r3, #0
//	return_value = MPU6050_gyro_set_full_scale_range(FS_SCALE);
//	return_value = MPU6050_accel_set_full_scale_range(AFS_SCALE);
//	return_value = MPU6050_DLPF_configuration();

//	return MPU6050_OK;
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000160 	.word	0x20000160

08001dd4 <MPU6050_gyro_set_full_scale_range>:

/**
 * @brief Configures gyroscope full scale range
 * @retval Status of gyroscope full_scale_range configuration
 */
int8_t MPU6050_gyro_set_full_scale_range(uint8_t FS_SEL) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	if (FS_SEL > 3) {
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d902      	bls.n	8001dea <MPU6050_gyro_set_full_scale_range+0x16>
		return MPU6050_ERR;
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	e01a      	b.n	8001e20 <MPU6050_gyro_set_full_scale_range+0x4c>
	}
	uint8_t buffer;
	__MPU6050_read(MPU6050_REG_GYRO_CONFIG, &buffer, sizeof(buffer)); // gyro_ref_conf_value must be like -> 000xx000 where xx=FS_SEL
 8001dea:	f107 030f 	add.w	r3, r7, #15
 8001dee:	2201      	movs	r2, #1
 8001df0:	4619      	mov	r1, r3
 8001df2:	201b      	movs	r0, #27
 8001df4:	f7ff ff64 	bl	8001cc0 <__MPU6050_read>
	buffer = buffer & ((FS_SEL << 3) | 0x07);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	f043 0307 	orr.w	r3, r3, #7
 8001e02:	b25a      	sxtb	r2, r3
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	73fb      	strb	r3, [r7, #15]
	return __MPU6050_write(MPU6050_REG_GYRO_CONFIG, &buffer, sizeof(buffer));
 8001e10:	f107 030f 	add.w	r3, r7, #15
 8001e14:	2201      	movs	r2, #1
 8001e16:	4619      	mov	r1, r3
 8001e18:	201b      	movs	r0, #27
 8001e1a:	f7ff ff77 	bl	8001d0c <__MPU6050_write>
 8001e1e:	4603      	mov	r3, r0

}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <MPU6050_accel_set_full_scale_range>:

/**
 * @brief Configures accelerometer full scale range
 * @retval Status of accelerometer full_scale_range configuration
 */
int8_t MPU6050_accel_set_full_scale_range(uint8_t AF_SEL) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	if (AF_SEL > 3) {
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d902      	bls.n	8001e3e <MPU6050_accel_set_full_scale_range+0x16>
		return MPU6050_ERR;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	e01a      	b.n	8001e74 <MPU6050_accel_set_full_scale_range+0x4c>
	}

	uint8_t buffer;
	__MPU6050_read(MPU6050_REG_ACCEL_CONFIG, &buffer, sizeof(buffer)); // accel_ref_conf_value must be like -> 000xx000 where xx=AF_SEL
 8001e3e:	f107 030f 	add.w	r3, r7, #15
 8001e42:	2201      	movs	r2, #1
 8001e44:	4619      	mov	r1, r3
 8001e46:	201c      	movs	r0, #28
 8001e48:	f7ff ff3a 	bl	8001cc0 <__MPU6050_read>
	buffer = buffer & ((AF_SEL << 3) | 0x07);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	f043 0307 	orr.w	r3, r3, #7
 8001e56:	b25a      	sxtb	r2, r3
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	73fb      	strb	r3, [r7, #15]
	return __MPU6050_write(MPU6050_REG_ACCEL_CONFIG, &buffer, sizeof(buffer));
 8001e64:	f107 030f 	add.w	r3, r7, #15
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	201c      	movs	r0, #28
 8001e6e:	f7ff ff4d 	bl	8001d0c <__MPU6050_write>
 8001e72:	4603      	mov	r3, r0

}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <MPU6050_set_rate_divider>:
/**
 * @brief Sets divider of gyroscope sample rate
 * @retval Status of this operation
 */
int8_t MPU6050_set_rate_divider(uint8_t sample_rate_divider) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	return __MPU6050_write(MPU6050_SMPRT_DIV, &sample_rate_divider,
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	2019      	movs	r0, #25
 8001e8e:	f7ff ff3d 	bl	8001d0c <__MPU6050_write>
 8001e92:	4603      	mov	r3, r0
			sizeof(sample_rate_divider));
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <MPU6050_configuration>:

/**
 * @brief Resets MPU6050, disables the temperature sensor and chooses internal 8MHz oscillator as clock source
 * @retval Status of MPU6050 configuration
 */
int8_t MPU6050_configuration() {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	uint8_t buffer;
	__MPU6050_read(MPU6050_REG_PWR_MGMT_1, &buffer, sizeof(buffer));
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	206b      	movs	r0, #107	; 0x6b
 8001eaa:	f7ff ff09 	bl	8001cc0 <__MPU6050_read>
	//Such that default value of register is 0x08
	buffer = (buffer & 0x10) | 0x08;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	71fb      	strb	r3, [r7, #7]
	return __MPU6050_write(MPU6050_REG_PWR_MGMT_1, &buffer, sizeof(buffer));
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	206b      	movs	r0, #107	; 0x6b
 8001eca:	f7ff ff1f 	bl	8001d0c <__MPU6050_write>
 8001ece:	4603      	mov	r3, r0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <MPU6050_DLPF_configuration>:

/**
 * @brief Configures accelerometer and gyroscope filter to max bandwidth
 * @retval Status of DLPF configuration
 */
int8_t MPU6050_DLPF_configuration() {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
	uint8_t buffer;
	__MPU6050_read(MPU6050_REG_CONFIG, &buffer, sizeof(buffer));
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	201a      	movs	r0, #26
 8001ee6:	f7ff feeb 	bl	8001cc0 <__MPU6050_read>
	buffer = buffer & 0xC0;
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	71fb      	strb	r3, [r7, #7]
	return __MPU6050_write(MPU6050_REG_CONFIG, &buffer, sizeof(buffer));
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	201a      	movs	r0, #26
 8001efc:	f7ff ff06 	bl	8001d0c <__MPU6050_write>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <MPU6050_retrieve_data>:

/**
 * @brief Reads  accelerometer and gyroscope data from MPU6050
 * @retval Status reads operation
 */
int8_t MPU6050_retrieve_data() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	return __MPU6050_read(MPU6050_REG_ACCEL_XOUT_H, in_buff, DATA_BUFFER_SIZE);
 8001f10:	220e      	movs	r2, #14
 8001f12:	4903      	ldr	r1, [pc, #12]	; (8001f20 <MPU6050_retrieve_data+0x14>)
 8001f14:	203b      	movs	r0, #59	; 0x3b
 8001f16:	f7ff fed3 	bl	8001cc0 <__MPU6050_read>
 8001f1a:	4603      	mov	r3, r0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200001c8 	.word	0x200001c8

08001f24 <__concatenate_buffer>:
 * @brief Concatenates two byte in a single half-word.
 * @param b1 Most significant byte
 * @param b2 Less significant byte
 * @retval b1 concatenated b2
 */
int16_t __concatenate_buffer(uint8_t b1, uint8_t b2) {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71bb      	strb	r3, [r7, #6]
	return ((uint16_t) b1 << 8) + b2;
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	b21b      	sxth	r3, r3
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <MPU6050_save_data>:
}

/**
 * @brief Stores accelerometer and gyro raw data in mpu instance declared in this module
 */
void MPU6050_save_data() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
	int16_t ax = __concatenate_buffer(in_buff[0], in_buff[1]);
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <MPU6050_save_data+0xac>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <MPU6050_save_data+0xac>)
 8001f60:	7852      	ldrb	r2, [r2, #1]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ffdd 	bl	8001f24 <__concatenate_buffer>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	81fb      	strh	r3, [r7, #14]
	int16_t ay = __concatenate_buffer(in_buff[2], in_buff[3]);
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <MPU6050_save_data+0xac>)
 8001f70:	789b      	ldrb	r3, [r3, #2]
 8001f72:	4a23      	ldr	r2, [pc, #140]	; (8002000 <MPU6050_save_data+0xac>)
 8001f74:	78d2      	ldrb	r2, [r2, #3]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ffd3 	bl	8001f24 <__concatenate_buffer>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	81bb      	strh	r3, [r7, #12]
	int16_t az = __concatenate_buffer(in_buff[4], in_buff[5]);
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MPU6050_save_data+0xac>)
 8001f84:	791b      	ldrb	r3, [r3, #4]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <MPU6050_save_data+0xac>)
 8001f88:	7952      	ldrb	r2, [r2, #5]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ffc9 	bl	8001f24 <__concatenate_buffer>
 8001f92:	4603      	mov	r3, r0
 8001f94:	817b      	strh	r3, [r7, #10]
	int16_t gx = __concatenate_buffer(in_buff[8], in_buff[9]);
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <MPU6050_save_data+0xac>)
 8001f98:	7a1b      	ldrb	r3, [r3, #8]
 8001f9a:	4a19      	ldr	r2, [pc, #100]	; (8002000 <MPU6050_save_data+0xac>)
 8001f9c:	7a52      	ldrb	r2, [r2, #9]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ffbf 	bl	8001f24 <__concatenate_buffer>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	813b      	strh	r3, [r7, #8]
	int16_t gy = __concatenate_buffer(in_buff[10], in_buff[11]);
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <MPU6050_save_data+0xac>)
 8001fac:	7a9b      	ldrb	r3, [r3, #10]
 8001fae:	4a14      	ldr	r2, [pc, #80]	; (8002000 <MPU6050_save_data+0xac>)
 8001fb0:	7ad2      	ldrb	r2, [r2, #11]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ffb5 	bl	8001f24 <__concatenate_buffer>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
	int16_t gz = __concatenate_buffer(in_buff[12], in_buff[13]);
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MPU6050_save_data+0xac>)
 8001fc0:	7b1b      	ldrb	r3, [r3, #12]
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <MPU6050_save_data+0xac>)
 8001fc4:	7b52      	ldrb	r2, [r2, #13]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ffab 	bl	8001f24 <__concatenate_buffer>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80bb      	strh	r3, [r7, #4]
	set_accel_axes(&(mpu_t.a), ax, ay, az);
 8001fd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fd6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fda:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001fde:	4809      	ldr	r0, [pc, #36]	; (8002004 <MPU6050_save_data+0xb0>)
 8001fe0:	f7fe ffee 	bl	8000fc0 <set_accel_axes>
	set_gyro_axes(&(mpu_t.g), gx, gy, gz);
 8001fe4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fe8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fec:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MPU6050_save_data+0xb4>)
 8001ff2:	f7ff fbd1 	bl	8001798 <set_gyro_axes>
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200001c8 	.word	0x200001c8
 8002004:	200001bc 	.word	0x200001bc
 8002008:	200001c2 	.word	0x200001c2

0800200c <MPU6050_get_gy>:

/**
 * @brief Gets last gy raw data read from MPU6050
 * @retval last gy raw data
 */
int16_t MPU6050_get_gy(){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	return get_gy(&(mpu_t.g));
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <MPU6050_get_gy+0x10>)
 8002012:	f7ff fbdd 	bl	80017d0 <get_gy>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200001c2 	.word	0x200001c2

08002020 <MPU6050_get_ax>:

/**
 * @brief Gets last ax raw data read from MPU6050
 * @retval last ax raw data
 */
int16_t MPU6050_get_ax(){
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	return get_ax(&(mpu_t.a));
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <MPU6050_get_ax+0x10>)
 8002026:	f7fe ffe7 	bl	8000ff8 <get_ax>
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200001bc 	.word	0x200001bc

08002034 <MPU6050_get_ay>:

/**
 * @brief Gets last ay raw data read from MPU6050
 * @retval last ay raw data
 */
int16_t MPU6050_get_ay(){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	return get_ay(&(mpu_t.a));
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <MPU6050_get_ay+0x10>)
 800203a:	f7fe ffea 	bl	8001012 <get_ay>
 800203e:	4603      	mov	r3, r0
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200001bc 	.word	0x200001bc

08002048 <MPU6050_get_az>:

/**
 * @brief Gets last az raw data read from MPU6050
 * @retval last az raw data
 */
int16_t MPU6050_get_az(){
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	return get_az(&(mpu_t.a));
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <MPU6050_get_az+0x10>)
 800204e:	f7fe ffed 	bl	800102c <get_az>
 8002052:	4603      	mov	r3, r0
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200001bc 	.word	0x200001bc

0800205c <_set_GyroX_offset>:

/**
 * @brief Sets gyroscope x axis offset
 * @param offset_x gyroscope x axis offset
 */
void _set_GyroX_offset(uint16_t offset_x) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2] = { (offset_x >> 8), offset_x & 0xff };
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b29b      	uxth	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	733b      	strb	r3, [r7, #12]
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	737b      	strb	r3, [r7, #13]
	__MPU6050_write(MPU6050_REG_GYRO_XOFFS_H, buffer, sizeof(buffer));
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	2202      	movs	r2, #2
 800207c:	4619      	mov	r1, r3
 800207e:	2013      	movs	r0, #19
 8002080:	f7ff fe44 	bl	8001d0c <__MPU6050_write>

}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_set_GyroY_offset>:

/**
 * @brief Sets gyroscope y axis offset
 * @param offset_y gyroscope y axis offset
 */
void _set_GyroY_offset(uint16_t offset_y) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2] = { (offset_y >> 8), offset_y & 0xff };
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	b29b      	uxth	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	733b      	strb	r3, [r7, #12]
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	737b      	strb	r3, [r7, #13]
	__MPU6050_write(MPU6050_REG_GYRO_YOFFS_H, buffer, sizeof(buffer));
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	2202      	movs	r2, #2
 80020ac:	4619      	mov	r1, r3
 80020ae:	2015      	movs	r0, #21
 80020b0:	f7ff fe2c 	bl	8001d0c <__MPU6050_write>
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_set_GyroZ_offset>:

/**
 * @brief Sets gyroscope z axis offset
 * @param offset_z gyroscope z axis offset
 */
void _set_GyroZ_offset(uint16_t offset_z) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2] = { (offset_z >> 8), offset_z & 0xff };
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	733b      	strb	r3, [r7, #12]
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	737b      	strb	r3, [r7, #13]
	__MPU6050_write(MPU6050_REG_GYRO_ZOFFS_H, buffer, sizeof(buffer));
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	2202      	movs	r2, #2
 80020dc:	4619      	mov	r1, r3
 80020de:	2017      	movs	r0, #23
 80020e0:	f7ff fe14 	bl	8001d0c <__MPU6050_write>
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <set_Gyro_offset>:
 * @brief Sets gyroscope axes offset
 * @param offset_x gyroscope x axis offset
 * @param offset_y gyroscope y axis offset
 * @param offset_z gyroscope z axis offset
 */
void set_Gyro_offset(uint16_t offset_x, uint16_t offset_y, uint16_t offset_z) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
 80020f6:	460b      	mov	r3, r1
 80020f8:	80bb      	strh	r3, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	807b      	strh	r3, [r7, #2]
	_set_GyroX_offset(offset_x);
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ffab 	bl	800205c <_set_GyroX_offset>
	_set_GyroY_offset(offset_y);
 8002106:	88bb      	ldrh	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ffbf 	bl	800208c <_set_GyroY_offset>
	_set_GyroZ_offset(offset_z);
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ffd3 	bl	80020bc <_set_GyroZ_offset>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_MspInit+0x4c>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_MspInit+0x4c>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_MspInit+0x4c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_MspInit+0x4c>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_MspInit+0x4c>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_MspInit+0x4c>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 fad8 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */

  HAL_TIM_IRQHandler(&htim11);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021ca:	f003 fca1 	bl	8005b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000268 	.word	0x20000268

080021d8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM11){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x16>
		execute_control();
 80021ea:	f7ff f989 	bl	8001500 <execute_control>
	}
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40014800 	.word	0x40014800

080021fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA2_Stream0_IRQHandler+0x10>)
 8002202:	f001 f8f9 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200000fc 	.word	0x200000fc

08002210 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	save_data();
 8002218:	f7ff fb88 	bl	800192c <save_data>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2224      	movs	r2, #36	; 0x24
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f926 	bl	80064a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <MX_TIM1_Init+0xa8>)
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <MX_TIM1_Init+0xac>)
 8002268:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <MX_TIM1_Init+0xa8>)
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <MX_TIM1_Init+0xa8>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <MX_TIM1_Init+0xa8>)
 8002278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <MX_TIM1_Init+0xa8>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MX_TIM1_Init+0xa8>)
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <MX_TIM1_Init+0xa8>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002290:	2301      	movs	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022a8:	2301      	movs	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	4619      	mov	r1, r3
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <MX_TIM1_Init+0xa8>)
 80022bc:	f003 fb82 	bl	80059c4 <HAL_TIM_Encoder_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80022c6:	f7ff fc0b 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4806      	ldr	r0, [pc, #24]	; (80022f0 <MX_TIM1_Init+0xa8>)
 80022d8:	f004 f83a 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022e2:	f7ff fbfd 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	3730      	adds	r7, #48	; 0x30
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200002b0 	.word	0x200002b0
 80022f4:	40010000 	.word	0x40010000

080022f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	; 0x30
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2224      	movs	r2, #36	; 0x24
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f004 f8ce 	bl	80064a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002316:	4a21      	ldr	r2, [pc, #132]	; (800239c <MX_TIM3_Init+0xa4>)
 8002318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <MX_TIM3_Init+0xa0>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800233a:	2301      	movs	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002342:	2301      	movs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002352:	2301      	movs	r3, #1
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4619      	mov	r1, r3
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002366:	f003 fb2d 	bl	80059c4 <HAL_TIM_Encoder_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002370:	f7ff fbb6 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002382:	f003 ffe5 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800238c:	f7ff fba8 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	3730      	adds	r7, #48	; 0x30
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000220 	.word	0x20000220
 800239c:	40000400 	.word	0x40000400

080023a0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	615a      	str	r2, [r3, #20]
 80023b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <MX_TIM10_Init+0x90>)
 80023ba:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <MX_TIM10_Init+0x94>)
 80023bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <MX_TIM10_Init+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <MX_TIM10_Init+0x90>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <MX_TIM10_Init+0x90>)
 80023cc:	2263      	movs	r2, #99	; 0x63
 80023ce:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <MX_TIM10_Init+0x90>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <MX_TIM10_Init+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023dc:	4814      	ldr	r0, [pc, #80]	; (8002430 <MX_TIM10_Init+0x90>)
 80023de:	f003 f935 	bl	800564c <HAL_TIM_Base_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80023e8:	f7ff fb7a 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80023ec:	4810      	ldr	r0, [pc, #64]	; (8002430 <MX_TIM10_Init+0x90>)
 80023ee:	f003 f9df 	bl	80057b0 <HAL_TIM_PWM_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80023f8:	f7ff fb72 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fc:	2360      	movs	r3, #96	; 0x60
 80023fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	4807      	ldr	r0, [pc, #28]	; (8002430 <MX_TIM10_Init+0x90>)
 8002414:	f003 fc84 	bl	8005d20 <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 800241e:	f7ff fb5f 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002422:	4803      	ldr	r0, [pc, #12]	; (8002430 <MX_TIM10_Init+0x90>)
 8002424:	f000 f8ee 	bl	8002604 <HAL_TIM_MspPostInit>

}
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200001d8 	.word	0x200001d8
 8002434:	40014400 	.word	0x40014400

08002438 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_TIM11_Init+0x40>)
 800243e:	4a0f      	ldr	r2, [pc, #60]	; (800247c <MX_TIM11_Init+0x44>)
 8002440:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <MX_TIM11_Init+0x40>)
 8002444:	2204      	movs	r2, #4
 8002446:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_TIM11_Init+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15999;
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <MX_TIM11_Init+0x40>)
 8002450:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002454:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_TIM11_Init+0x40>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_TIM11_Init+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_TIM11_Init+0x40>)
 8002464:	f003 f8f2 	bl	800564c <HAL_TIM_Base_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800246e:	f7ff fb37 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000268 	.word	0x20000268
 800247c:	40014800 	.word	0x40014800

08002480 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a36      	ldr	r2, [pc, #216]	; (8002578 <HAL_TIM_Encoder_MspInit+0xf8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d135      	bne.n	800250e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b35      	ldr	r3, [pc, #212]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a34      	ldr	r2, [pc, #208]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b32      	ldr	r3, [pc, #200]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a2d      	ldr	r2, [pc, #180]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4619      	mov	r1, r3
 80024f6:	4822      	ldr	r0, [pc, #136]	; (8002580 <HAL_TIM_Encoder_MspInit+0x100>)
 80024f8:	f001 f9e8 	bl	80038cc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2101      	movs	r1, #1
 8002500:	201a      	movs	r0, #26
 8002502:	f000 fe3c 	bl	800317e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002506:	201a      	movs	r0, #26
 8002508:	f000 fe55 	bl	80031b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800250c:	e030      	b.n	8002570 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM3)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <HAL_TIM_Encoder_MspInit+0x104>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d12b      	bne.n	8002570 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	4a16      	ldr	r2, [pc, #88]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	6413      	str	r3, [r2, #64]	; 0x40
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	4a0f      	ldr	r2, [pc, #60]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6313      	str	r3, [r2, #48]	; 0x30
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_TIM_Encoder_MspInit+0xfc>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002560:	2302      	movs	r3, #2
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <HAL_TIM_Encoder_MspInit+0x100>)
 800256c:	f001 f9ae 	bl	80038cc <HAL_GPIO_Init>
}
 8002570:	bf00      	nop
 8002572:	3730      	adds	r7, #48	; 0x30
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40010000 	.word	0x40010000
 800257c:	40023800 	.word	0x40023800
 8002580:	40020000 	.word	0x40020000
 8002584:	40000400 	.word	0x40000400

08002588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_TIM_Base_MspInit+0x70>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_TIM_Base_MspInit+0x74>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <HAL_TIM_Base_MspInit+0x74>)
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_TIM_Base_MspInit+0x74>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80025b6:	e01a      	b.n	80025ee <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a10      	ldr	r2, [pc, #64]	; (8002600 <HAL_TIM_Base_MspInit+0x78>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d115      	bne.n	80025ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_TIM_Base_MspInit+0x74>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_TIM_Base_MspInit+0x74>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_TIM_Base_MspInit+0x74>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	201a      	movs	r0, #26
 80025e4:	f000 fdcb 	bl	800317e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80025e8:	201a      	movs	r0, #26
 80025ea:	f000 fde4 	bl	80031b6 <HAL_NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40014400 	.word	0x40014400
 80025fc:	40023800 	.word	0x40023800
 8002600:	40014800 	.word	0x40014800

08002604 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <HAL_TIM_MspPostInit+0x68>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d11e      	bne.n	8002664 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_TIM_MspPostInit+0x6c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <HAL_TIM_MspPostInit+0x6c>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_TIM_MspPostInit+0x6c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002654:	2303      	movs	r3, #3
 8002656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4619      	mov	r1, r3
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <HAL_TIM_MspPostInit+0x70>)
 8002660:	f001 f934 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40014400 	.word	0x40014400
 8002670:	40023800 	.word	0x40023800
 8002674:	40020400 	.word	0x40020400

08002678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800267e:	490e      	ldr	r1, [pc, #56]	; (80026b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002694:	4c0b      	ldr	r4, [pc, #44]	; (80026c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026a2:	f7ff fdbf 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f003 fedb 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026aa:	f7ff f97b 	bl	80019a4 <main>
  bx  lr    
 80026ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80026bc:	08006c38 	.word	0x08006c38
  ldr r2, =_sbss
 80026c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80026c4:	200002fc 	.word	0x200002fc

080026c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC_IRQHandler>
	...

080026cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <HAL_Init+0x40>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_Init+0x40>)
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_Init+0x40>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 fd37 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f808 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fd0e 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fd4f 	bl	80031d2 <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f000 fd17 	bl	800317e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000004 	.word	0x20000004
 8002768:	2000000c 	.word	0x2000000c
 800276c:	20000008 	.word	0x20000008

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	2000000c 	.word	0x2000000c
 8002794:	200002f8 	.word	0x200002f8

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	200002f8 	.word	0x200002f8

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff ffee 	bl	8002798 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_Delay+0x44>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffde 	bl	8002798 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e033      	b.n	8002876 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fc68 	bl	80010ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d118      	bne.n	8002868 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800283e:	f023 0302 	bic.w	r3, r3, #2
 8002842:	f043 0202 	orr.w	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa3e 	bl	8002ccc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f023 0303 	bic.w	r3, r3, #3
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
 8002866:	e001      	b.n	800286c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_ADC_Start_DMA+0x1e>
 800289a:	2302      	movs	r3, #2
 800289c:	e0ce      	b.n	8002a3c <HAL_ADC_Start_DMA+0x1bc>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d018      	beq.n	80028e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028c4:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <HAL_ADC_Start_DMA+0x1c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5f      	ldr	r2, [pc, #380]	; (8002a48 <HAL_ADC_Start_DMA+0x1c8>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0c9a      	lsrs	r2, r3, #18
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028d8:	e002      	b.n	80028e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	3b01      	subs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f9      	bne.n	80028da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f4:	d107      	bne.n	8002906 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002904:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 8086 	bne.w	8002a22 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002940:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002954:	d106      	bne.n	8002964 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f023 0206 	bic.w	r2, r3, #6
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
 8002962:	e002      	b.n	800296a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_ADC_Start_DMA+0x1cc>)
 8002974:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	4a35      	ldr	r2, [pc, #212]	; (8002a50 <HAL_ADC_Start_DMA+0x1d0>)
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <HAL_ADC_Start_DMA+0x1d4>)
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	4a33      	ldr	r2, [pc, #204]	; (8002a58 <HAL_ADC_Start_DMA+0x1d8>)
 800298c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002996:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	334c      	adds	r3, #76	; 0x4c
 80029c2:	4619      	mov	r1, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f000 fcbe 	bl	8003348 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10f      	bne.n	80029f8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d129      	bne.n	8002a3a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	e020      	b.n	8002a3a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_ADC_Start_DMA+0x1dc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d11b      	bne.n	8002a3a <HAL_ADC_Start_DMA+0x1ba>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d114      	bne.n	8002a3a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	e00b      	b.n	8002a3a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f043 0210 	orr.w	r2, r3, #16
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000004 	.word	0x20000004
 8002a48:	431bde83 	.word	0x431bde83
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	08002ec5 	.word	0x08002ec5
 8002a54:	08002f7f 	.word	0x08002f7f
 8002a58:	08002f9b 	.word	0x08002f9b
 8002a5c:	40012000 	.word	0x40012000

08002a60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e105      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x228>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d925      	bls.n	8002b00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68d9      	ldr	r1, [r3, #12]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b1e      	subs	r3, #30
 8002aca:	2207      	movs	r2, #7
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68d9      	ldr	r1, [r3, #12]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	4603      	mov	r3, r0
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4403      	add	r3, r0
 8002af2:	3b1e      	subs	r3, #30
 8002af4:	409a      	lsls	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	e022      	b.n	8002b46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6919      	ldr	r1, [r3, #16]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	2207      	movs	r2, #7
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	400a      	ands	r2, r1
 8002b22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6919      	ldr	r1, [r3, #16]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4403      	add	r3, r0
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d824      	bhi.n	8002b98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b05      	subs	r3, #5
 8002b60:	221f      	movs	r2, #31
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b05      	subs	r3, #5
 8002b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34
 8002b96:	e04c      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d824      	bhi.n	8002bea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	3b23      	subs	r3, #35	; 0x23
 8002bb2:	221f      	movs	r2, #31
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b23      	subs	r3, #35	; 0x23
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
 8002be8:	e023      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b41      	subs	r3, #65	; 0x41
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	400a      	ands	r2, r1
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b41      	subs	r3, #65	; 0x41
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_ADC_ConfigChannel+0x234>)
 8002c34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <HAL_ADC_ConfigChannel+0x238>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d109      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1cc>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b12      	cmp	r3, #18
 8002c46:	d105      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <HAL_ADC_ConfigChannel+0x238>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d123      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d003      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x1e6>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b11      	cmp	r3, #17
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d111      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_ADC_ConfigChannel+0x23c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_ADC_ConfigChannel+0x240>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0c9a      	lsrs	r2, r3, #18
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40012300 	.word	0x40012300
 8002cc0:	40012000 	.word	0x40012000
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	431bde83 	.word	0x431bde83

08002ccc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd4:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <ADC_Init+0x1f0>)
 8002cd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	021a      	lsls	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <ADC_Init+0x1f4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d022      	beq.n	8002daa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	e00f      	b.n	8002dca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0202 	bic.w	r2, r2, #2
 8002dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7e1b      	ldrb	r3, [r3, #24]
 8002de4:	005a      	lsls	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01b      	beq.n	8002e30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	3b01      	subs	r3, #1
 8002e24:	035a      	lsls	r2, r3, #13
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	e007      	b.n	8002e40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	051a      	lsls	r2, r3, #20
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e82:	025a      	lsls	r2, r3, #9
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	029a      	lsls	r2, r3, #10
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	0f000001 	.word	0x0f000001

08002ec4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d13c      	bne.n	8002f58 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d12b      	bne.n	8002f50 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d127      	bne.n	8002f50 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d119      	bne.n	8002f50 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0220 	bic.w	r2, r2, #32
 8002f2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff f95d 	bl	8002210 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f56:	e00e      	b.n	8002f76 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fd85 	bl	8002a74 <HAL_ADC_ErrorCallback>
}
 8002f6a:	e004      	b.n	8002f76 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff fd67 	bl	8002a60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f043 0204 	orr.w	r2, r3, #4
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff fd5a 	bl	8002a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4907      	ldr	r1, [pc, #28]	; (8003064 <__NVIC_EnableIRQ+0x38>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000e100 	.word	0xe000e100

08003068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0a      	blt.n	8003092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	490c      	ldr	r1, [pc, #48]	; (80030b4 <__NVIC_SetPriority+0x4c>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	440b      	add	r3, r1
 800308c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003090:	e00a      	b.n	80030a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4908      	ldr	r1, [pc, #32]	; (80030b8 <__NVIC_SetPriority+0x50>)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3b04      	subs	r3, #4
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	440b      	add	r3, r1
 80030a6:	761a      	strb	r2, [r3, #24]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f1c3 0307 	rsb	r3, r3, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
 80030dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d902      	bls.n	80030ec <NVIC_EncodePriority+0x30>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b03      	subs	r3, #3
 80030ea:	e000      	b.n	80030ee <NVIC_EncodePriority+0x32>
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43d9      	mvns	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	4313      	orrs	r3, r2
         );
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003134:	d301      	bcc.n	800313a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <SysTick_Config+0x40>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003142:	210f      	movs	r1, #15
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f7ff ff8e 	bl	8003068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <SysTick_Config+0x40>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <SysTick_Config+0x40>)
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	e000e010 	.word	0xe000e010

08003168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff29 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003190:	f7ff ff3e 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	6978      	ldr	r0, [r7, #20]
 800319c:	f7ff ff8e 	bl	80030bc <NVIC_EncodePriority>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff5d 	bl	8003068 <__NVIC_SetPriority>
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff31 	bl	800302c <__NVIC_EnableIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffa2 	bl	8003124 <SysTick_Config>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031f8:	f7ff face 	bl	8002798 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e099      	b.n	800333c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003228:	e00f      	b.n	800324a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800322a:	f7ff fab5 	bl	8002798 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b05      	cmp	r3, #5
 8003236:	d908      	bls.n	800324a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2203      	movs	r2, #3
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e078      	b.n	800333c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e8      	bne.n	800322a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4b38      	ldr	r3, [pc, #224]	; (8003344 <HAL_DMA_Init+0x158>)
 8003264:	4013      	ands	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d107      	bne.n	80032b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	4313      	orrs	r3, r2
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0307 	bic.w	r3, r3, #7
 80032ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d117      	bne.n	800330e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa6f 	bl	80037d4 <DMA_CheckFifoParam>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2240      	movs	r2, #64	; 0x40
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800330a:	2301      	movs	r3, #1
 800330c:	e016      	b.n	800333c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fa26 	bl	8003768 <DMA_CalcBaseAndBitshift>
 800331c:	4603      	mov	r3, r0
 800331e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	223f      	movs	r2, #63	; 0x3f
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	f010803f 	.word	0xf010803f

08003348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_DMA_Start_IT+0x26>
 800336a:	2302      	movs	r3, #2
 800336c:	e040      	b.n	80033f0 <HAL_DMA_Start_IT+0xa8>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d12f      	bne.n	80033e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f9b8 	bl	800370c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	223f      	movs	r2, #63	; 0x3f
 80033a2:	409a      	lsls	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0216 	orr.w	r2, r2, #22
 80033b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0208 	orr.w	r2, r2, #8
 80033ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e005      	b.n	80033ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
 80033ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003404:	4b92      	ldr	r3, [pc, #584]	; (8003650 <HAL_DMA_IRQHandler+0x258>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a92      	ldr	r2, [pc, #584]	; (8003654 <HAL_DMA_IRQHandler+0x25c>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	2208      	movs	r2, #8
 8003424:	409a      	lsls	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01a      	beq.n	8003464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2208      	movs	r2, #8
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2201      	movs	r2, #1
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2201      	movs	r2, #1
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	2204      	movs	r2, #4
 80034a0:	409a      	lsls	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	2204      	movs	r2, #4
 80034be:	409a      	lsls	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2210      	movs	r2, #16
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d043      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03c      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	2210      	movs	r2, #16
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d018      	beq.n	800353a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
 8003526:	e01f      	b.n	8003568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01b      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e016      	b.n	8003568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0208 	bic.w	r2, r2, #8
 8003556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2220      	movs	r2, #32
 800356e:	409a      	lsls	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 808e 	beq.w	8003696 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8086 	beq.w	8003696 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	2220      	movs	r2, #32
 8003590:	409a      	lsls	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d136      	bne.n	8003610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0216 	bic.w	r2, r2, #22
 80035b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x1da>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0208 	bic.w	r2, r2, #8
 80035e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	223f      	movs	r2, #63	; 0x3f
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	2b00      	cmp	r3, #0
 8003604:	d07d      	beq.n	8003702 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
        }
        return;
 800360e:	e078      	b.n	8003702 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01c      	beq.n	8003658 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d108      	bne.n	800363e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	2b00      	cmp	r3, #0
 8003632:	d030      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
 800363c:	e02b      	b.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d027      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
 800364e:	e022      	b.n	8003696 <HAL_DMA_IRQHandler+0x29e>
 8003650:	20000004 	.word	0x20000004
 8003654:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0210 	bic.w	r2, r2, #16
 8003674:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	2b00      	cmp	r3, #0
 800369c:	d032      	beq.n	8003704 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d022      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2205      	movs	r2, #5
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3301      	adds	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d307      	bcc.n	80036de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f2      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x2ca>
 80036dc:	e000      	b.n	80036e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e000      	b.n	8003704 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003702:	bf00      	nop
    }
  }
}
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d108      	bne.n	800374c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800374a:	e007      	b.n	800375c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3b10      	subs	r3, #16
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <DMA_CalcBaseAndBitshift+0x64>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d909      	bls.n	80037aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58
 80037a8:	e007      	b.n	80037ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	aaaaaaab 	.word	0xaaaaaaab
 80037d0:	08006bb0 	.word	0x08006bb0

080037d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0x5a>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d856      	bhi.n	80038a2 <DMA_CheckFifoParam+0xce>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <DMA_CheckFifoParam+0x28>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800381f 	.word	0x0800381f
 8003804:	0800380d 	.word	0x0800380d
 8003808:	080038a3 	.word	0x080038a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d046      	beq.n	80038a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e043      	b.n	80038a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003826:	d140      	bne.n	80038aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382c:	e03d      	b.n	80038aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003836:	d121      	bne.n	800387c <DMA_CheckFifoParam+0xa8>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d837      	bhi.n	80038ae <DMA_CheckFifoParam+0xda>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <DMA_CheckFifoParam+0x70>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003855 	.word	0x08003855
 8003848:	0800385b 	.word	0x0800385b
 800384c:	08003855 	.word	0x08003855
 8003850:	0800386d 	.word	0x0800386d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e030      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d025      	beq.n	80038b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386a:	e022      	b.n	80038b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003874:	d11f      	bne.n	80038b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800387a:	e01c      	b.n	80038b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d903      	bls.n	800388a <DMA_CheckFifoParam+0xb6>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d003      	beq.n	8003890 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003888:	e018      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
      break;
 800388e:	e015      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00e      	beq.n	80038ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      break;
 80038a0:	e00b      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a2:	bf00      	nop
 80038a4:	e00a      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      break;
 80038a6:	bf00      	nop
 80038a8:	e008      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      break;
 80038aa:	bf00      	nop
 80038ac:	e006      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      break;
 80038ae:	bf00      	nop
 80038b0:	e004      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      break;   
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <DMA_CheckFifoParam+0xe8>
      break;
 80038ba:	bf00      	nop
    }
  } 
  
  return status; 
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e159      	b.n	8003b9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	f040 8148 	bne.w	8003b96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d005      	beq.n	800391e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391a:	2b02      	cmp	r3, #2
 800391c:	d130      	bne.n	8003980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	2203      	movs	r2, #3
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003954:	2201      	movs	r2, #1
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 0201 	and.w	r2, r3, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d017      	beq.n	80039bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	2203      	movs	r2, #3
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d123      	bne.n	8003a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	08da      	lsrs	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3208      	adds	r2, #8
 80039d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	08da      	lsrs	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80a2 	beq.w	8003b96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b57      	ldr	r3, [pc, #348]	; (8003bb4 <HAL_GPIO_Init+0x2e8>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a56      	ldr	r2, [pc, #344]	; (8003bb4 <HAL_GPIO_Init+0x2e8>)
 8003a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b54      	ldr	r3, [pc, #336]	; (8003bb4 <HAL_GPIO_Init+0x2e8>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6e:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_GPIO_Init+0x2ec>)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a49      	ldr	r2, [pc, #292]	; (8003bbc <HAL_GPIO_Init+0x2f0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d019      	beq.n	8003ace <HAL_GPIO_Init+0x202>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a48      	ldr	r2, [pc, #288]	; (8003bc0 <HAL_GPIO_Init+0x2f4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <HAL_GPIO_Init+0x1fe>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a47      	ldr	r2, [pc, #284]	; (8003bc4 <HAL_GPIO_Init+0x2f8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_GPIO_Init+0x1fa>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a46      	ldr	r2, [pc, #280]	; (8003bc8 <HAL_GPIO_Init+0x2fc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <HAL_GPIO_Init+0x1f6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a45      	ldr	r2, [pc, #276]	; (8003bcc <HAL_GPIO_Init+0x300>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <HAL_GPIO_Init+0x1f2>
 8003aba:	2304      	movs	r3, #4
 8003abc:	e008      	b.n	8003ad0 <HAL_GPIO_Init+0x204>
 8003abe:	2307      	movs	r3, #7
 8003ac0:	e006      	b.n	8003ad0 <HAL_GPIO_Init+0x204>
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e004      	b.n	8003ad0 <HAL_GPIO_Init+0x204>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e002      	b.n	8003ad0 <HAL_GPIO_Init+0x204>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_GPIO_Init+0x204>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	f002 0203 	and.w	r2, r2, #3
 8003ad6:	0092      	lsls	r2, r2, #2
 8003ad8:	4093      	lsls	r3, r2
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ae0:	4935      	ldr	r1, [pc, #212]	; (8003bb8 <HAL_GPIO_Init+0x2ec>)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aee:	4b38      	ldr	r3, [pc, #224]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b3c:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b90:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	f67f aea2 	bls.w	80038e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	3724      	adds	r7, #36	; 0x24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40020000 	.word	0x40020000
 8003bc0:	40020400 	.word	0x40020400
 8003bc4:	40020800 	.word	0x40020800
 8003bc8:	40020c00 	.word	0x40020c00
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40013c00 	.word	0x40013c00

08003bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
 8003be0:	4613      	mov	r3, r2
 8003be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be4:	787b      	ldrb	r3, [r7, #1]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf0:	e003      	b.n	8003bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	041a      	lsls	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e12b      	b.n	8003e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fe0a 	bl	8001848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f001 fcda 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8003c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4a81      	ldr	r2, [pc, #516]	; (8003e7c <HAL_I2C_Init+0x274>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d807      	bhi.n	8003c8c <HAL_I2C_Init+0x84>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a80      	ldr	r2, [pc, #512]	; (8003e80 <HAL_I2C_Init+0x278>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bf94      	ite	ls
 8003c84:	2301      	movls	r3, #1
 8003c86:	2300      	movhi	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e006      	b.n	8003c9a <HAL_I2C_Init+0x92>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a7d      	ldr	r2, [pc, #500]	; (8003e84 <HAL_I2C_Init+0x27c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	bf94      	ite	ls
 8003c94:	2301      	movls	r3, #1
 8003c96:	2300      	movhi	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0e7      	b.n	8003e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a78      	ldr	r2, [pc, #480]	; (8003e88 <HAL_I2C_Init+0x280>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0c9b      	lsrs	r3, r3, #18
 8003cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a6a      	ldr	r2, [pc, #424]	; (8003e7c <HAL_I2C_Init+0x274>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d802      	bhi.n	8003cdc <HAL_I2C_Init+0xd4>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	e009      	b.n	8003cf0 <HAL_I2C_Init+0xe8>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	4a69      	ldr	r2, [pc, #420]	; (8003e8c <HAL_I2C_Init+0x284>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	3301      	adds	r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	495c      	ldr	r1, [pc, #368]	; (8003e7c <HAL_I2C_Init+0x274>)
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d819      	bhi.n	8003d44 <HAL_I2C_Init+0x13c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e59      	subs	r1, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d24:	400b      	ands	r3, r1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_I2C_Init+0x138>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1e59      	subs	r1, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	e051      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e04f      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d111      	bne.n	8003d70 <HAL_I2C_Init+0x168>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e012      	b.n	8003d96 <HAL_I2C_Init+0x18e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	0099      	lsls	r1, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x196>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e022      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10e      	bne.n	8003dc4 <HAL_I2C_Init+0x1bc>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1e58      	subs	r0, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	440b      	add	r3, r1
 8003db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc2:	e00f      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e58      	subs	r0, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	0099      	lsls	r1, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6809      	ldr	r1, [r1, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6911      	ldr	r1, [r2, #16]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	000186a0 	.word	0x000186a0
 8003e80:	001e847f 	.word	0x001e847f
 8003e84:	003d08ff 	.word	0x003d08ff
 8003e88:	431bde83 	.word	0x431bde83
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	4608      	mov	r0, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	817b      	strh	r3, [r7, #10]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	813b      	strh	r3, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eaa:	f7fe fc75 	bl	8002798 <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	f040 80d9 	bne.w	8004070 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2319      	movs	r3, #25
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	496d      	ldr	r1, [pc, #436]	; (800407c <HAL_I2C_Mem_Write+0x1ec>)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fdad 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0cc      	b.n	8004072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Mem_Write+0x56>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0c5      	b.n	8004072 <HAL_I2C_Mem_Write+0x1e2>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d007      	beq.n	8003f0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2221      	movs	r2, #33	; 0x21
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2240      	movs	r2, #64	; 0x40
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a4d      	ldr	r2, [pc, #308]	; (8004080 <HAL_I2C_Mem_Write+0x1f0>)
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f4e:	88f8      	ldrh	r0, [r7, #6]
 8003f50:	893a      	ldrh	r2, [r7, #8]
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fbe4 	bl	800472c <I2C_RequestMemoryWrite>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d052      	beq.n	8004010 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e081      	b.n	8004072 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fe2e 	bl	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d107      	bne.n	8003f96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e06b      	b.n	8004072 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d11b      	bne.n	8004010 <HAL_I2C_Mem_Write+0x180>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d017      	beq.n	8004010 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1aa      	bne.n	8003f6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fe1a 	bl	8004c56 <I2C_WaitOnBTFFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00d      	beq.n	8004044 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b04      	cmp	r3, #4
 800402e:	d107      	bne.n	8004040 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e016      	b.n	8004072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	00100002 	.word	0x00100002
 8004080:	ffff0000 	.word	0xffff0000

08004084 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	4603      	mov	r3, r0
 8004094:	817b      	strh	r3, [r7, #10]
 8004096:	460b      	mov	r3, r1
 8004098:	813b      	strh	r3, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800409e:	f7fe fb7b 	bl	8002798 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	f040 8208 	bne.w	80044c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2319      	movs	r3, #25
 80040b8:	2201      	movs	r2, #1
 80040ba:	497b      	ldr	r1, [pc, #492]	; (80042a8 <HAL_I2C_Mem_Read+0x224>)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fcb3 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
 80040ca:	e1fb      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_I2C_Mem_Read+0x56>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e1f4      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d007      	beq.n	8004100 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2222      	movs	r2, #34	; 0x22
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a5b      	ldr	r2, [pc, #364]	; (80042ac <HAL_I2C_Mem_Read+0x228>)
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004142:	88f8      	ldrh	r0, [r7, #6]
 8004144:	893a      	ldrh	r2, [r7, #8]
 8004146:	8979      	ldrh	r1, [r7, #10]
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	4603      	mov	r3, r0
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fb80 	bl	8004858 <I2C_RequestMemoryRead>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e1b0      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d113      	bne.n	8004192 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	623b      	str	r3, [r7, #32]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	623b      	str	r3, [r7, #32]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	623b      	str	r3, [r7, #32]
 800417e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e184      	b.n	800449c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	2b01      	cmp	r3, #1
 8004198:	d11b      	bne.n	80041d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e164      	b.n	800449c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d11b      	bne.n	8004212 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	e144      	b.n	800449c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004228:	e138      	b.n	800449c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	2b03      	cmp	r3, #3
 8004230:	f200 80f1 	bhi.w	8004416 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	2b01      	cmp	r3, #1
 800423a:	d123      	bne.n	8004284 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fd49 	bl	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e139      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004282:	e10b      	b.n	800449c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	2b02      	cmp	r3, #2
 800428a:	d14e      	bne.n	800432a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	2200      	movs	r2, #0
 8004294:	4906      	ldr	r1, [pc, #24]	; (80042b0 <HAL_I2C_Mem_Read+0x22c>)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fbc6 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e10e      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
 80042a6:	bf00      	nop
 80042a8:	00100002 	.word	0x00100002
 80042ac:	ffff0000 	.word	0xffff0000
 80042b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004328:	e0b8      	b.n	800449c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	2200      	movs	r2, #0
 8004332:	4966      	ldr	r1, [pc, #408]	; (80044cc <HAL_I2C_Mem_Read+0x448>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fb77 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0bf      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	2200      	movs	r2, #0
 800438e:	494f      	ldr	r1, [pc, #316]	; (80044cc <HAL_I2C_Mem_Read+0x448>)
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fb49 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e091      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004414:	e042      	b.n	800449c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fc5c 	bl	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e04c      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d118      	bne.n	800449c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f47f aec2 	bne.w	800422a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e000      	b.n	80044c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3728      	adds	r7, #40	; 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	00010004 	.word	0x00010004

080044d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	460b      	mov	r3, r1
 80044de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044e0:	f7fe f95a 	bl	8002798 <HAL_GetTick>
 80044e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	f040 8111 	bne.w	800471a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2319      	movs	r3, #25
 80044fe:	2201      	movs	r2, #1
 8004500:	4988      	ldr	r1, [pc, #544]	; (8004724 <HAL_I2C_IsDeviceReady+0x254>)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fa90 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	e104      	b.n	800471c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_I2C_IsDeviceReady+0x50>
 800451c:	2302      	movs	r3, #2
 800451e:	e0fd      	b.n	800471c <HAL_I2C_IsDeviceReady+0x24c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d007      	beq.n	8004546 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2224      	movs	r2, #36	; 0x24
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a70      	ldr	r2, [pc, #448]	; (8004728 <HAL_I2C_IsDeviceReady+0x258>)
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004578:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2200      	movs	r2, #0
 8004582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa4e 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a0:	d103      	bne.n	80045aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0b6      	b.n	800471c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045be:	f7fe f8eb 	bl	8002798 <HAL_GetTick>
 80045c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045f2:	e025      	b.n	8004640 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fe f8d0 	bl	8002798 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <HAL_I2C_IsDeviceReady+0x13a>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	22a0      	movs	r2, #160	; 0xa0
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2ba0      	cmp	r3, #160	; 0xa0
 800464a:	d005      	beq.n	8004658 <HAL_I2C_IsDeviceReady+0x188>
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <HAL_I2C_IsDeviceReady+0x188>
 8004652:	7dbb      	ldrb	r3, [r7, #22]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0cd      	beq.n	80045f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d129      	bne.n	80046c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2319      	movs	r3, #25
 800469a:	2201      	movs	r2, #1
 800469c:	4921      	ldr	r1, [pc, #132]	; (8004724 <HAL_I2C_IsDeviceReady+0x254>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f9c2 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e036      	b.n	800471c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e02c      	b.n	800471c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	2319      	movs	r3, #25
 80046e2:	2201      	movs	r2, #1
 80046e4:	490f      	ldr	r1, [pc, #60]	; (8004724 <HAL_I2C_IsDeviceReady+0x254>)
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f99e 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e012      	b.n	800471c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	3301      	adds	r3, #1
 80046fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	f4ff af32 	bcc.w	800456a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	00100002 	.word	0x00100002
 8004728:	ffff0000 	.word	0xffff0000

0800472c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4603      	mov	r3, r0
 800473c:	817b      	strh	r3, [r7, #10]
 800473e:	460b      	mov	r3, r1
 8004740:	813b      	strh	r3, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004754:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2200      	movs	r2, #0
 800475e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f960 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477c:	d103      	bne.n	8004786 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e05f      	b.n	800484a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004798:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	492d      	ldr	r1, [pc, #180]	; (8004854 <I2C_RequestMemoryWrite+0x128>)
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f998 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e04c      	b.n	800484a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c8:	6a39      	ldr	r1, [r7, #32]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa02 	bl	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00d      	beq.n	80047f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d107      	bne.n	80047ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e02b      	b.n	800484a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047f8:	893b      	ldrh	r3, [r7, #8]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	611a      	str	r2, [r3, #16]
 8004802:	e021      	b.n	8004848 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004804:	893b      	ldrh	r3, [r7, #8]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	b29b      	uxth	r3, r3
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004814:	6a39      	ldr	r1, [r7, #32]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f9dc 	bl	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2b04      	cmp	r3, #4
 8004828:	d107      	bne.n	800483a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e005      	b.n	800484a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800483e:	893b      	ldrh	r3, [r7, #8]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	00010002 	.word	0x00010002

08004858 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004880:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004890:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	2200      	movs	r2, #0
 800489a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f8c2 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b8:	d103      	bne.n	80048c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0aa      	b.n	8004a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048c6:	897b      	ldrh	r3, [r7, #10]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	4952      	ldr	r1, [pc, #328]	; (8004a24 <I2C_RequestMemoryRead+0x1cc>)
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f8fa 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e097      	b.n	8004a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004904:	6a39      	ldr	r1, [r7, #32]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f964 	bl	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00d      	beq.n	800492e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	2b04      	cmp	r3, #4
 8004918:	d107      	bne.n	800492a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004928:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e076      	b.n	8004a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d105      	bne.n	8004940 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004934:	893b      	ldrh	r3, [r7, #8]
 8004936:	b2da      	uxtb	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	611a      	str	r2, [r3, #16]
 800493e:	e021      	b.n	8004984 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004940:	893b      	ldrh	r3, [r7, #8]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b29b      	uxth	r3, r3
 8004946:	b2da      	uxtb	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	6a39      	ldr	r1, [r7, #32]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f93e 	bl	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	2b04      	cmp	r3, #4
 8004964:	d107      	bne.n	8004976 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004974:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e050      	b.n	8004a1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800497a:	893b      	ldrh	r3, [r7, #8]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	6a39      	ldr	r1, [r7, #32]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f923 	bl	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00d      	beq.n	80049b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	2b04      	cmp	r3, #4
 800499a:	d107      	bne.n	80049ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e035      	b.n	8004a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f82b 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e6:	d103      	bne.n	80049f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e013      	b.n	8004a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049f4:	897b      	ldrh	r3, [r7, #10]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	6a3a      	ldr	r2, [r7, #32]
 8004a08:	4906      	ldr	r1, [pc, #24]	; (8004a24 <I2C_RequestMemoryRead+0x1cc>)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f863 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	00010002 	.word	0x00010002

08004a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a38:	e025      	b.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d021      	beq.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7fd fea9 	bl	8002798 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d116      	bne.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e023      	b.n	8004ace <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10d      	bne.n	8004aac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	e00c      	b.n	8004ac6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d0b6      	beq.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae4:	e051      	b.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af4:	d123      	bne.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0204 	orr.w	r2, r3, #4
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e046      	b.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d021      	beq.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fd fe27 	bl	8002798 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d116      	bne.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e020      	b.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10c      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	e00b      	b.n	8004bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	43da      	mvns	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf14      	ite	ne
 8004bc0:	2301      	movne	r3, #1
 8004bc2:	2300      	moveq	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d18d      	bne.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be0:	e02d      	b.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f8ce 	bl	8004d84 <I2C_IsAcknowledgeFailed>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e02d      	b.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d021      	beq.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fd fdcd 	bl	8002798 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d116      	bne.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e007      	b.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b80      	cmp	r3, #128	; 0x80
 8004c4a:	d1ca      	bne.n	8004be2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c62:	e02d      	b.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f88d 	bl	8004d84 <I2C_IsAcknowledgeFailed>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e02d      	b.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d021      	beq.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7c:	f7fd fd8c 	bl	8002798 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e007      	b.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d1ca      	bne.n	8004c64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce4:	e042      	b.n	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d119      	bne.n	8004d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0210 	mvn.w	r2, #16
 8004cfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e029      	b.n	8004d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d28:	f7fd fd36 	bl	8002798 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e007      	b.n	8004d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d1b5      	bne.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9a:	d11b      	bne.n	8004dd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004da4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e264      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d075      	beq.n	8004eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e02:	4ba3      	ldr	r3, [pc, #652]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4ba0      	ldr	r3, [pc, #640]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d112      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1a:	4b9d      	ldr	r3, [pc, #628]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	4b99      	ldr	r3, [pc, #612]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05b      	beq.n	8004eec <HAL_RCC_OscConfig+0x108>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d157      	bne.n	8004eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e23f      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d106      	bne.n	8004e58 <HAL_RCC_OscConfig+0x74>
 8004e4a:	4b91      	ldr	r3, [pc, #580]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a90      	ldr	r2, [pc, #576]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e01d      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x98>
 8004e62:	4b8b      	ldr	r3, [pc, #556]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a8a      	ldr	r2, [pc, #552]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b88      	ldr	r3, [pc, #544]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a87      	ldr	r2, [pc, #540]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e7c:	4b84      	ldr	r3, [pc, #528]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a83      	ldr	r2, [pc, #524]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b81      	ldr	r3, [pc, #516]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a80      	ldr	r2, [pc, #512]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fc7c 	bl	8002798 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fd fc78 	bl	8002798 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e204      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b76      	ldr	r3, [pc, #472]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xc0>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fc68 	bl	8002798 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd fc64 	bl	8002798 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1f0      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0xe8>
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d063      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efa:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f06:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d11c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b5f      	ldr	r3, [pc, #380]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1e:	4b5c      	ldr	r3, [pc, #368]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e1c4      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f36:	4b56      	ldr	r3, [pc, #344]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4952      	ldr	r1, [pc, #328]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	e03a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f54:	4b4f      	ldr	r3, [pc, #316]	; (8005094 <HAL_RCC_OscConfig+0x2b0>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd fc1d 	bl	8002798 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fd fc19 	bl	8002798 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1a5      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	4b46      	ldr	r3, [pc, #280]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f80:	4b43      	ldr	r3, [pc, #268]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4940      	ldr	r1, [pc, #256]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	600b      	str	r3, [r1, #0]
 8004f94:	e015      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_RCC_OscConfig+0x2b0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fd fbfc 	bl	8002798 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa4:	f7fd fbf8 	bl	8002798 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e184      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb6:	4b36      	ldr	r3, [pc, #216]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d030      	beq.n	8005030 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd6:	4b30      	ldr	r3, [pc, #192]	; (8005098 <HAL_RCC_OscConfig+0x2b4>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fd fbdc 	bl	8002798 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fd fbd8 	bl	8002798 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e164      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff6:	4b26      	ldr	r3, [pc, #152]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x200>
 8005002:	e015      	b.n	8005030 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_OscConfig+0x2b4>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500a:	f7fd fbc5 	bl	8002798 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005012:	f7fd fbc1 	bl	8002798 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e14d      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80a0 	beq.w	800517e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a0e      	ldr	r2, [pc, #56]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d121      	bne.n	80050be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a07      	ldr	r2, [pc, #28]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005086:	f7fd fb87 	bl	8002798 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	e011      	b.n	80050b2 <HAL_RCC_OscConfig+0x2ce>
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	42470000 	.word	0x42470000
 8005098:	42470e80 	.word	0x42470e80
 800509c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a0:	f7fd fb7a 	bl	8002798 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e106      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b2:	4b85      	ldr	r3, [pc, #532]	; (80052c8 <HAL_RCC_OscConfig+0x4e4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d106      	bne.n	80050d4 <HAL_RCC_OscConfig+0x2f0>
 80050c6:	4b81      	ldr	r3, [pc, #516]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a80      	ldr	r2, [pc, #512]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70
 80050d2:	e01c      	b.n	800510e <HAL_RCC_OscConfig+0x32a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d10c      	bne.n	80050f6 <HAL_RCC_OscConfig+0x312>
 80050dc:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	4a7a      	ldr	r2, [pc, #488]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	6713      	str	r3, [r2, #112]	; 0x70
 80050e8:	4b78      	ldr	r3, [pc, #480]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	4a77      	ldr	r2, [pc, #476]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	; 0x70
 80050f4:	e00b      	b.n	800510e <HAL_RCC_OscConfig+0x32a>
 80050f6:	4b75      	ldr	r3, [pc, #468]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a74      	ldr	r2, [pc, #464]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
 8005102:	4b72      	ldr	r3, [pc, #456]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a71      	ldr	r2, [pc, #452]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d015      	beq.n	8005142 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fd fb3f 	bl	8002798 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fd fb3b 	bl	8002798 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0c5      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	4b65      	ldr	r3, [pc, #404]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RCC_OscConfig+0x33a>
 8005140:	e014      	b.n	800516c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fd fb29 	bl	8002798 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fd fb25 	bl	8002798 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0af      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	4b5a      	ldr	r3, [pc, #360]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d105      	bne.n	800517e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005172:	4b56      	ldr	r3, [pc, #344]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a55      	ldr	r2, [pc, #340]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 809b 	beq.w	80052be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005188:	4b50      	ldr	r3, [pc, #320]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d05c      	beq.n	800524e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d141      	bne.n	8005220 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519c:	4b4c      	ldr	r3, [pc, #304]	; (80052d0 <HAL_RCC_OscConfig+0x4ec>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a2:	f7fd faf9 	bl	8002798 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fd faf5 	bl	8002798 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e081      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051bc:	4b43      	ldr	r3, [pc, #268]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	019b      	lsls	r3, r3, #6
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	3b01      	subs	r3, #1
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	4937      	ldr	r1, [pc, #220]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f2:	4b37      	ldr	r3, [pc, #220]	; (80052d0 <HAL_RCC_OscConfig+0x4ec>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f8:	f7fd face 	bl	8002798 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005200:	f7fd faca 	bl	8002798 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e056      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x41c>
 800521e:	e04e      	b.n	80052be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005220:	4b2b      	ldr	r3, [pc, #172]	; (80052d0 <HAL_RCC_OscConfig+0x4ec>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fd fab7 	bl	8002798 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522e:	f7fd fab3 	bl	8002798 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e03f      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005240:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x44a>
 800524c:	e037      	b.n	80052be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e032      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800525a:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <HAL_RCC_OscConfig+0x4e8>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d028      	beq.n	80052ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d121      	bne.n	80052ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d11a      	bne.n	80052ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800528a:	4013      	ands	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005290:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005292:	4293      	cmp	r3, r2
 8005294:	d111      	bne.n	80052ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	3b01      	subs	r3, #1
 80052a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d001      	beq.n	80052be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40007000 	.word	0x40007000
 80052cc:	40023800 	.word	0x40023800
 80052d0:	42470060 	.word	0x42470060

080052d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0cc      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052e8:	4b68      	ldr	r3, [pc, #416]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d90c      	bls.n	8005310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b65      	ldr	r3, [pc, #404]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b63      	ldr	r3, [pc, #396]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0b8      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005328:	4b59      	ldr	r3, [pc, #356]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4a58      	ldr	r2, [pc, #352]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005340:	4b53      	ldr	r3, [pc, #332]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4a52      	ldr	r2, [pc, #328]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800534a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534c:	4b50      	ldr	r3, [pc, #320]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	494d      	ldr	r1, [pc, #308]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d044      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	4b47      	ldr	r3, [pc, #284]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d119      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d003      	beq.n	8005392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538e:	2b03      	cmp	r3, #3
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005392:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e06f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a2:	4b3b      	ldr	r3, [pc, #236]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e067      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b2:	4b37      	ldr	r3, [pc, #220]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f023 0203 	bic.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4934      	ldr	r1, [pc, #208]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c4:	f7fd f9e8 	bl	8002798 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053cc:	f7fd f9e4 	bl	8002798 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e04f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	4b2b      	ldr	r3, [pc, #172]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 020c 	and.w	r2, r3, #12
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1eb      	bne.n	80053cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053f4:	4b25      	ldr	r3, [pc, #148]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d20c      	bcs.n	800541c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e032      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005428:	4b19      	ldr	r3, [pc, #100]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4916      	ldr	r1, [pc, #88]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	490e      	ldr	r1, [pc, #56]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800545a:	f000 f821 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 800545e:	4602      	mov	r2, r0
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	490a      	ldr	r1, [pc, #40]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 800546c:	5ccb      	ldrb	r3, [r1, r3]
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_ClockConfig+0x1c8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd f948 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023c00 	.word	0x40023c00
 8005490:	40023800 	.word	0x40023800
 8005494:	08006b98 	.word	0x08006b98
 8005498:	20000004 	.word	0x20000004
 800549c:	20000008 	.word	0x20000008

080054a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a0:	b5b0      	push	{r4, r5, r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054a6:	2100      	movs	r1, #0
 80054a8:	6079      	str	r1, [r7, #4]
 80054aa:	2100      	movs	r1, #0
 80054ac:	60f9      	str	r1, [r7, #12]
 80054ae:	2100      	movs	r1, #0
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054b2:	2100      	movs	r1, #0
 80054b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b6:	4952      	ldr	r1, [pc, #328]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 80054b8:	6889      	ldr	r1, [r1, #8]
 80054ba:	f001 010c 	and.w	r1, r1, #12
 80054be:	2908      	cmp	r1, #8
 80054c0:	d00d      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x3e>
 80054c2:	2908      	cmp	r1, #8
 80054c4:	f200 8094 	bhi.w	80055f0 <HAL_RCC_GetSysClockFreq+0x150>
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_RCC_GetSysClockFreq+0x32>
 80054cc:	2904      	cmp	r1, #4
 80054ce:	d003      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x38>
 80054d0:	e08e      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054d2:	4b4c      	ldr	r3, [pc, #304]	; (8005604 <HAL_RCC_GetSysClockFreq+0x164>)
 80054d4:	60bb      	str	r3, [r7, #8]
       break;
 80054d6:	e08e      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d8:	4b4b      	ldr	r3, [pc, #300]	; (8005608 <HAL_RCC_GetSysClockFreq+0x168>)
 80054da:	60bb      	str	r3, [r7, #8]
      break;
 80054dc:	e08b      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054de:	4948      	ldr	r1, [pc, #288]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 80054e0:	6849      	ldr	r1, [r1, #4]
 80054e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054e6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e8:	4945      	ldr	r1, [pc, #276]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 80054ea:	6849      	ldr	r1, [r1, #4]
 80054ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80054f0:	2900      	cmp	r1, #0
 80054f2:	d024      	beq.n	800553e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f4:	4942      	ldr	r1, [pc, #264]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 80054f6:	6849      	ldr	r1, [r1, #4]
 80054f8:	0989      	lsrs	r1, r1, #6
 80054fa:	4608      	mov	r0, r1
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005504:	f04f 0500 	mov.w	r5, #0
 8005508:	ea00 0204 	and.w	r2, r0, r4
 800550c:	ea01 0305 	and.w	r3, r1, r5
 8005510:	493d      	ldr	r1, [pc, #244]	; (8005608 <HAL_RCC_GetSysClockFreq+0x168>)
 8005512:	fb01 f003 	mul.w	r0, r1, r3
 8005516:	2100      	movs	r1, #0
 8005518:	fb01 f102 	mul.w	r1, r1, r2
 800551c:	1844      	adds	r4, r0, r1
 800551e:	493a      	ldr	r1, [pc, #232]	; (8005608 <HAL_RCC_GetSysClockFreq+0x168>)
 8005520:	fba2 0101 	umull	r0, r1, r2, r1
 8005524:	1863      	adds	r3, r4, r1
 8005526:	4619      	mov	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	461a      	mov	r2, r3
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	f7fb fb0e 	bl	8000b50 <__aeabi_uldivmod>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4613      	mov	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	e04a      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553e:	4b30      	ldr	r3, [pc, #192]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	099b      	lsrs	r3, r3, #6
 8005544:	461a      	mov	r2, r3
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800554e:	f04f 0100 	mov.w	r1, #0
 8005552:	ea02 0400 	and.w	r4, r2, r0
 8005556:	ea03 0501 	and.w	r5, r3, r1
 800555a:	4620      	mov	r0, r4
 800555c:	4629      	mov	r1, r5
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	014b      	lsls	r3, r1, #5
 8005568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800556c:	0142      	lsls	r2, r0, #5
 800556e:	4610      	mov	r0, r2
 8005570:	4619      	mov	r1, r3
 8005572:	1b00      	subs	r0, r0, r4
 8005574:	eb61 0105 	sbc.w	r1, r1, r5
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	018b      	lsls	r3, r1, #6
 8005582:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005586:	0182      	lsls	r2, r0, #6
 8005588:	1a12      	subs	r2, r2, r0
 800558a:	eb63 0301 	sbc.w	r3, r3, r1
 800558e:	f04f 0000 	mov.w	r0, #0
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	00d9      	lsls	r1, r3, #3
 8005598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800559c:	00d0      	lsls	r0, r2, #3
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	1912      	adds	r2, r2, r4
 80055a4:	eb45 0303 	adc.w	r3, r5, r3
 80055a8:	f04f 0000 	mov.w	r0, #0
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	0299      	lsls	r1, r3, #10
 80055b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055b6:	0290      	lsls	r0, r2, #10
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	f7fb fac2 	bl	8000b50 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4613      	mov	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	3301      	adds	r3, #1
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ec:	60bb      	str	r3, [r7, #8]
      break;
 80055ee:	e002      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <HAL_RCC_GetSysClockFreq+0x164>)
 80055f2:	60bb      	str	r3, [r7, #8]
      break;
 80055f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055f6:	68bb      	ldr	r3, [r7, #8]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	00f42400 	.word	0x00f42400
 8005608:	017d7840 	.word	0x017d7840

0800560c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <HAL_RCC_GetHCLKFreq+0x14>)
 8005612:	681b      	ldr	r3, [r3, #0]
}
 8005614:	4618      	mov	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000004 	.word	0x20000004

08005624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005628:	f7ff fff0 	bl	800560c <HAL_RCC_GetHCLKFreq>
 800562c:	4602      	mov	r2, r0
 800562e:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	0a9b      	lsrs	r3, r3, #10
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	4903      	ldr	r1, [pc, #12]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800563a:	5ccb      	ldrb	r3, [r1, r3]
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40023800 	.word	0x40023800
 8005648:	08006ba8 	.word	0x08006ba8

0800564c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e041      	b.n	80056e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fc ff88 	bl	8002588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f000 fc2e 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d001      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e044      	b.n	800578e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1e      	ldr	r2, [pc, #120]	; (800579c <HAL_TIM_Base_Start_IT+0xb0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d013      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a16      	ldr	r2, [pc, #88]	; (80057ac <HAL_TIM_Base_Start_IT+0xc0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d111      	bne.n	800577c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b06      	cmp	r3, #6
 8005768:	d010      	beq.n	800578c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	e007      	b.n	800578c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40014000 	.word	0x40014000

080057b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e041      	b.n	8005846 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f839 	bl	800584e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f000 fb7c 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <HAL_TIM_PWM_Start+0x24>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	e022      	b.n	80058ce <HAL_TIM_PWM_Start+0x6a>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b04      	cmp	r3, #4
 800588c:	d109      	bne.n	80058a2 <HAL_TIM_PWM_Start+0x3e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	e015      	b.n	80058ce <HAL_TIM_PWM_Start+0x6a>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d109      	bne.n	80058bc <HAL_TIM_PWM_Start+0x58>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	e008      	b.n	80058ce <HAL_TIM_PWM_Start+0x6a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	bf14      	ite	ne
 80058c8:	2301      	movne	r3, #1
 80058ca:	2300      	moveq	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e068      	b.n	80059a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x82>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e4:	e013      	b.n	800590e <HAL_TIM_PWM_Start+0xaa>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d104      	bne.n	80058f6 <HAL_TIM_PWM_Start+0x92>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f4:	e00b      	b.n	800590e <HAL_TIM_PWM_Start+0xaa>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d104      	bne.n	8005906 <HAL_TIM_PWM_Start+0xa2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005904:	e003      	b.n	800590e <HAL_TIM_PWM_Start+0xaa>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2201      	movs	r2, #1
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fcf4 	bl	8006304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <HAL_TIM_PWM_Start+0x14c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d107      	bne.n	8005936 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <HAL_TIM_PWM_Start+0x14c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <HAL_TIM_PWM_Start+0x10e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005948:	d013      	beq.n	8005972 <HAL_TIM_PWM_Start+0x10e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <HAL_TIM_PWM_Start+0x150>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_TIM_PWM_Start+0x10e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <HAL_TIM_PWM_Start+0x154>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_TIM_PWM_Start+0x10e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a16      	ldr	r2, [pc, #88]	; (80059bc <HAL_TIM_PWM_Start+0x158>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIM_PWM_Start+0x10e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <HAL_TIM_PWM_Start+0x15c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d111      	bne.n	8005996 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b06      	cmp	r3, #6
 8005982:	d010      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	e007      	b.n	80059a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40014000 	.word	0x40014000

080059c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e097      	b.n	8005b08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7fc fd47 	bl	8002480 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fa67 	bl	8005eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	4313      	orrs	r3, r2
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a64:	f023 030c 	bic.w	r3, r3, #12
 8005a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	4313      	orrs	r3, r2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	031b      	lsls	r3, r3, #12
 8005a94:	4313      	orrs	r3, r2
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d122      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d11b      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0202 	mvn.w	r2, #2
 8005b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9ac 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f99e 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f9af 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d122      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d11b      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0204 	mvn.w	r2, #4
 8005b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f982 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005bac:	e005      	b.n	8005bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f974 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f985 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d122      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d11b      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0208 	mvn.w	r2, #8
 8005be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2204      	movs	r2, #4
 8005bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f958 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f94a 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f95b 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d122      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d11b      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0210 	mvn.w	r2, #16
 8005c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f92e 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f920 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f931 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10e      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d107      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0201 	mvn.w	r2, #1
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fc faa2 	bl	80021d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cac:	2b80      	cmp	r3, #128	; 0x80
 8005cae:	d107      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fbc0 	bl	8006440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d10e      	bne.n	8005cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	d107      	bne.n	8005cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8f6 	bl	8005ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d107      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0220 	mvn.w	r2, #32
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fb8a 	bl	800642c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e0ac      	b.n	8005e94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	f200 809f 	bhi.w	8005e88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005e89 	.word	0x08005e89
 8005d58:	08005e89 	.word	0x08005e89
 8005d5c:	08005e89 	.word	0x08005e89
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005e89 	.word	0x08005e89
 8005d68:	08005e89 	.word	0x08005e89
 8005d6c:	08005e89 	.word	0x08005e89
 8005d70:	08005e07 	.word	0x08005e07
 8005d74:	08005e89 	.word	0x08005e89
 8005d78:	08005e89 	.word	0x08005e89
 8005d7c:	08005e89 	.word	0x08005e89
 8005d80:	08005e47 	.word	0x08005e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f92e 	bl	8005fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0208 	orr.w	r2, r2, #8
 8005d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0204 	bic.w	r2, r2, #4
 8005dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6999      	ldr	r1, [r3, #24]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	619a      	str	r2, [r3, #24]
      break;
 8005dc2:	e062      	b.n	8005e8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f974 	bl	80060b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6999      	ldr	r1, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	021a      	lsls	r2, r3, #8
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	619a      	str	r2, [r3, #24]
      break;
 8005e04:	e041      	b.n	8005e8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 f9bf 	bl	8006190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0208 	orr.w	r2, r2, #8
 8005e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0204 	bic.w	r2, r2, #4
 8005e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69d9      	ldr	r1, [r3, #28]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	61da      	str	r2, [r3, #28]
      break;
 8005e44:	e021      	b.n	8005e8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fa09 	bl	8006264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	021a      	lsls	r2, r3, #8
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	61da      	str	r2, [r3, #28]
      break;
 8005e86:	e000      	b.n	8005e8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a34      	ldr	r2, [pc, #208]	; (8005fd0 <TIM_Base_SetConfig+0xe4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00f      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0a:	d00b      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a31      	ldr	r2, [pc, #196]	; (8005fd4 <TIM_Base_SetConfig+0xe8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a30      	ldr	r2, [pc, #192]	; (8005fd8 <TIM_Base_SetConfig+0xec>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <TIM_Base_SetConfig+0xf0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d108      	bne.n	8005f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a25      	ldr	r2, [pc, #148]	; (8005fd0 <TIM_Base_SetConfig+0xe4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01b      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f44:	d017      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <TIM_Base_SetConfig+0xe8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <TIM_Base_SetConfig+0xec>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00f      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <TIM_Base_SetConfig+0xf0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <TIM_Base_SetConfig+0xf4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <TIM_Base_SetConfig+0xf8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <TIM_Base_SetConfig+0xfc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d108      	bne.n	8005f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <TIM_Base_SetConfig+0xe4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800

08005fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f023 0201 	bic.w	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0303 	bic.w	r3, r3, #3
 8006022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f023 0302 	bic.w	r3, r3, #2
 8006034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <TIM_OC1_SetConfig+0xc8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d10c      	bne.n	8006062 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0308 	bic.w	r3, r3, #8
 800604e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 0304 	bic.w	r3, r3, #4
 8006060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <TIM_OC1_SetConfig+0xc8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d111      	bne.n	800608e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	621a      	str	r2, [r3, #32]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	40010000 	.word	0x40010000

080060b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 0210 	bic.w	r2, r3, #16
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f023 0320 	bic.w	r3, r3, #32
 8006102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <TIM_OC2_SetConfig+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d10d      	bne.n	8006134 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a15      	ldr	r2, [pc, #84]	; (800618c <TIM_OC2_SetConfig+0xd4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d113      	bne.n	8006164 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800614a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000

08006190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <TIM_OC3_SetConfig+0xd0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10d      	bne.n	800620a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a14      	ldr	r2, [pc, #80]	; (8006260 <TIM_OC3_SetConfig+0xd0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d113      	bne.n	800623a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40010000 	.word	0x40010000

08006264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	031b      	lsls	r3, r3, #12
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a10      	ldr	r2, [pc, #64]	; (8006300 <TIM_OC4_SetConfig+0x9c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d109      	bne.n	80062d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	019b      	lsls	r3, r3, #6
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000

08006304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e050      	b.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d018      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d013      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a16      	ldr	r2, [pc, #88]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a15      	ldr	r2, [pc, #84]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d10c      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00
 8006428:	40014000 	.word	0x40014000

0800642c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <__errno>:
 8006454:	4b01      	ldr	r3, [pc, #4]	; (800645c <__errno+0x8>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20000010 	.word	0x20000010

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4d0d      	ldr	r5, [pc, #52]	; (8006498 <__libc_init_array+0x38>)
 8006464:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006466:	1b64      	subs	r4, r4, r5
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	2600      	movs	r6, #0
 800646c:	42a6      	cmp	r6, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	4d0b      	ldr	r5, [pc, #44]	; (80064a0 <__libc_init_array+0x40>)
 8006472:	4c0c      	ldr	r4, [pc, #48]	; (80064a4 <__libc_init_array+0x44>)
 8006474:	f000 fb82 	bl	8006b7c <_init>
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	2600      	movs	r6, #0
 800647e:	42a6      	cmp	r6, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f855 3b04 	ldr.w	r3, [r5], #4
 8006488:	4798      	blx	r3
 800648a:	3601      	adds	r6, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006492:	4798      	blx	r3
 8006494:	3601      	adds	r6, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	08006c30 	.word	0x08006c30
 800649c:	08006c30 	.word	0x08006c30
 80064a0:	08006c30 	.word	0x08006c30
 80064a4:	08006c34 	.word	0x08006c34

080064a8 <memset>:
 80064a8:	4402      	add	r2, r0
 80064aa:	4603      	mov	r3, r0
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d100      	bne.n	80064b2 <memset+0xa>
 80064b0:	4770      	bx	lr
 80064b2:	f803 1b01 	strb.w	r1, [r3], #1
 80064b6:	e7f9      	b.n	80064ac <memset+0x4>

080064b8 <atan2>:
 80064b8:	f000 b836 	b.w	8006528 <__ieee754_atan2>

080064bc <sqrt>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	ed2d 8b02 	vpush	{d8}
 80064c2:	ec55 4b10 	vmov	r4, r5, d0
 80064c6:	f000 f8f9 	bl	80066bc <__ieee754_sqrt>
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <sqrt+0x64>)
 80064cc:	eeb0 8a40 	vmov.f32	s16, s0
 80064d0:	eef0 8a60 	vmov.f32	s17, s1
 80064d4:	f993 3000 	ldrsb.w	r3, [r3]
 80064d8:	3301      	adds	r3, #1
 80064da:	d019      	beq.n	8006510 <sqrt+0x54>
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7fa face 	bl	8000a84 <__aeabi_dcmpun>
 80064e8:	b990      	cbnz	r0, 8006510 <sqrt+0x54>
 80064ea:	2200      	movs	r2, #0
 80064ec:	2300      	movs	r3, #0
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7fa fa9f 	bl	8000a34 <__aeabi_dcmplt>
 80064f6:	b158      	cbz	r0, 8006510 <sqrt+0x54>
 80064f8:	f7ff ffac 	bl	8006454 <__errno>
 80064fc:	2321      	movs	r3, #33	; 0x21
 80064fe:	6003      	str	r3, [r0, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	4610      	mov	r0, r2
 8006506:	4619      	mov	r1, r3
 8006508:	f7fa f94c 	bl	80007a4 <__aeabi_ddiv>
 800650c:	ec41 0b18 	vmov	d8, r0, r1
 8006510:	eeb0 0a48 	vmov.f32	s0, s16
 8006514:	eef0 0a68 	vmov.f32	s1, s17
 8006518:	ecbd 8b02 	vpop	{d8}
 800651c:	bd38      	pop	{r3, r4, r5, pc}
 800651e:	bf00      	nop
 8006520:	20000074 	.word	0x20000074
 8006524:	00000000 	.word	0x00000000

08006528 <__ieee754_atan2>:
 8006528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800652c:	ec57 6b11 	vmov	r6, r7, d1
 8006530:	4273      	negs	r3, r6
 8006532:	f8df e184 	ldr.w	lr, [pc, #388]	; 80066b8 <__ieee754_atan2+0x190>
 8006536:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800653a:	4333      	orrs	r3, r6
 800653c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006540:	4573      	cmp	r3, lr
 8006542:	ec51 0b10 	vmov	r0, r1, d0
 8006546:	ee11 8a10 	vmov	r8, s2
 800654a:	d80a      	bhi.n	8006562 <__ieee754_atan2+0x3a>
 800654c:	4244      	negs	r4, r0
 800654e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006552:	4304      	orrs	r4, r0
 8006554:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006558:	4574      	cmp	r4, lr
 800655a:	ee10 9a10 	vmov	r9, s0
 800655e:	468c      	mov	ip, r1
 8006560:	d907      	bls.n	8006572 <__ieee754_atan2+0x4a>
 8006562:	4632      	mov	r2, r6
 8006564:	463b      	mov	r3, r7
 8006566:	f7f9 fe3d 	bl	80001e4 <__adddf3>
 800656a:	ec41 0b10 	vmov	d0, r0, r1
 800656e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006572:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006576:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800657a:	4334      	orrs	r4, r6
 800657c:	d103      	bne.n	8006586 <__ieee754_atan2+0x5e>
 800657e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006582:	f000 b951 	b.w	8006828 <atan>
 8006586:	17bc      	asrs	r4, r7, #30
 8006588:	f004 0402 	and.w	r4, r4, #2
 800658c:	ea53 0909 	orrs.w	r9, r3, r9
 8006590:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006594:	d107      	bne.n	80065a6 <__ieee754_atan2+0x7e>
 8006596:	2c02      	cmp	r4, #2
 8006598:	d060      	beq.n	800665c <__ieee754_atan2+0x134>
 800659a:	2c03      	cmp	r4, #3
 800659c:	d1e5      	bne.n	800656a <__ieee754_atan2+0x42>
 800659e:	a142      	add	r1, pc, #264	; (adr r1, 80066a8 <__ieee754_atan2+0x180>)
 80065a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065a4:	e7e1      	b.n	800656a <__ieee754_atan2+0x42>
 80065a6:	ea52 0808 	orrs.w	r8, r2, r8
 80065aa:	d106      	bne.n	80065ba <__ieee754_atan2+0x92>
 80065ac:	f1bc 0f00 	cmp.w	ip, #0
 80065b0:	da5f      	bge.n	8006672 <__ieee754_atan2+0x14a>
 80065b2:	a13f      	add	r1, pc, #252	; (adr r1, 80066b0 <__ieee754_atan2+0x188>)
 80065b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b8:	e7d7      	b.n	800656a <__ieee754_atan2+0x42>
 80065ba:	4572      	cmp	r2, lr
 80065bc:	d10f      	bne.n	80065de <__ieee754_atan2+0xb6>
 80065be:	4293      	cmp	r3, r2
 80065c0:	f104 34ff 	add.w	r4, r4, #4294967295
 80065c4:	d107      	bne.n	80065d6 <__ieee754_atan2+0xae>
 80065c6:	2c02      	cmp	r4, #2
 80065c8:	d84c      	bhi.n	8006664 <__ieee754_atan2+0x13c>
 80065ca:	4b35      	ldr	r3, [pc, #212]	; (80066a0 <__ieee754_atan2+0x178>)
 80065cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80065d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80065d4:	e7c9      	b.n	800656a <__ieee754_atan2+0x42>
 80065d6:	2c02      	cmp	r4, #2
 80065d8:	d848      	bhi.n	800666c <__ieee754_atan2+0x144>
 80065da:	4b32      	ldr	r3, [pc, #200]	; (80066a4 <__ieee754_atan2+0x17c>)
 80065dc:	e7f6      	b.n	80065cc <__ieee754_atan2+0xa4>
 80065de:	4573      	cmp	r3, lr
 80065e0:	d0e4      	beq.n	80065ac <__ieee754_atan2+0x84>
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80065e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80065ec:	da1e      	bge.n	800662c <__ieee754_atan2+0x104>
 80065ee:	2f00      	cmp	r7, #0
 80065f0:	da01      	bge.n	80065f6 <__ieee754_atan2+0xce>
 80065f2:	323c      	adds	r2, #60	; 0x3c
 80065f4:	db1e      	blt.n	8006634 <__ieee754_atan2+0x10c>
 80065f6:	4632      	mov	r2, r6
 80065f8:	463b      	mov	r3, r7
 80065fa:	f7fa f8d3 	bl	80007a4 <__aeabi_ddiv>
 80065fe:	ec41 0b10 	vmov	d0, r0, r1
 8006602:	f000 fab1 	bl	8006b68 <fabs>
 8006606:	f000 f90f 	bl	8006828 <atan>
 800660a:	ec51 0b10 	vmov	r0, r1, d0
 800660e:	2c01      	cmp	r4, #1
 8006610:	d013      	beq.n	800663a <__ieee754_atan2+0x112>
 8006612:	2c02      	cmp	r4, #2
 8006614:	d015      	beq.n	8006642 <__ieee754_atan2+0x11a>
 8006616:	2c00      	cmp	r4, #0
 8006618:	d0a7      	beq.n	800656a <__ieee754_atan2+0x42>
 800661a:	a319      	add	r3, pc, #100	; (adr r3, 8006680 <__ieee754_atan2+0x158>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fdde 	bl	80001e0 <__aeabi_dsub>
 8006624:	a318      	add	r3, pc, #96	; (adr r3, 8006688 <__ieee754_atan2+0x160>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	e014      	b.n	8006656 <__ieee754_atan2+0x12e>
 800662c:	a118      	add	r1, pc, #96	; (adr r1, 8006690 <__ieee754_atan2+0x168>)
 800662e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006632:	e7ec      	b.n	800660e <__ieee754_atan2+0xe6>
 8006634:	2000      	movs	r0, #0
 8006636:	2100      	movs	r1, #0
 8006638:	e7e9      	b.n	800660e <__ieee754_atan2+0xe6>
 800663a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800663e:	4619      	mov	r1, r3
 8006640:	e793      	b.n	800656a <__ieee754_atan2+0x42>
 8006642:	a30f      	add	r3, pc, #60	; (adr r3, 8006680 <__ieee754_atan2+0x158>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 fdca 	bl	80001e0 <__aeabi_dsub>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	a10d      	add	r1, pc, #52	; (adr r1, 8006688 <__ieee754_atan2+0x160>)
 8006652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006656:	f7f9 fdc3 	bl	80001e0 <__aeabi_dsub>
 800665a:	e786      	b.n	800656a <__ieee754_atan2+0x42>
 800665c:	a10a      	add	r1, pc, #40	; (adr r1, 8006688 <__ieee754_atan2+0x160>)
 800665e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006662:	e782      	b.n	800656a <__ieee754_atan2+0x42>
 8006664:	a10c      	add	r1, pc, #48	; (adr r1, 8006698 <__ieee754_atan2+0x170>)
 8006666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800666a:	e77e      	b.n	800656a <__ieee754_atan2+0x42>
 800666c:	2000      	movs	r0, #0
 800666e:	2100      	movs	r1, #0
 8006670:	e77b      	b.n	800656a <__ieee754_atan2+0x42>
 8006672:	a107      	add	r1, pc, #28	; (adr r1, 8006690 <__ieee754_atan2+0x168>)
 8006674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006678:	e777      	b.n	800656a <__ieee754_atan2+0x42>
 800667a:	bf00      	nop
 800667c:	f3af 8000 	nop.w
 8006680:	33145c07 	.word	0x33145c07
 8006684:	3ca1a626 	.word	0x3ca1a626
 8006688:	54442d18 	.word	0x54442d18
 800668c:	400921fb 	.word	0x400921fb
 8006690:	54442d18 	.word	0x54442d18
 8006694:	3ff921fb 	.word	0x3ff921fb
 8006698:	54442d18 	.word	0x54442d18
 800669c:	3fe921fb 	.word	0x3fe921fb
 80066a0:	08006bb8 	.word	0x08006bb8
 80066a4:	08006bd0 	.word	0x08006bd0
 80066a8:	54442d18 	.word	0x54442d18
 80066ac:	c00921fb 	.word	0xc00921fb
 80066b0:	54442d18 	.word	0x54442d18
 80066b4:	bff921fb 	.word	0xbff921fb
 80066b8:	7ff00000 	.word	0x7ff00000

080066bc <__ieee754_sqrt>:
 80066bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c0:	ec55 4b10 	vmov	r4, r5, d0
 80066c4:	4e56      	ldr	r6, [pc, #344]	; (8006820 <__ieee754_sqrt+0x164>)
 80066c6:	43ae      	bics	r6, r5
 80066c8:	ee10 0a10 	vmov	r0, s0
 80066cc:	ee10 3a10 	vmov	r3, s0
 80066d0:	4629      	mov	r1, r5
 80066d2:	462a      	mov	r2, r5
 80066d4:	d110      	bne.n	80066f8 <__ieee754_sqrt+0x3c>
 80066d6:	ee10 2a10 	vmov	r2, s0
 80066da:	462b      	mov	r3, r5
 80066dc:	f7f9 ff38 	bl	8000550 <__aeabi_dmul>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4620      	mov	r0, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7f9 fd7c 	bl	80001e4 <__adddf3>
 80066ec:	4604      	mov	r4, r0
 80066ee:	460d      	mov	r5, r1
 80066f0:	ec45 4b10 	vmov	d0, r4, r5
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	dc10      	bgt.n	800671e <__ieee754_sqrt+0x62>
 80066fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006700:	4330      	orrs	r0, r6
 8006702:	d0f5      	beq.n	80066f0 <__ieee754_sqrt+0x34>
 8006704:	b15d      	cbz	r5, 800671e <__ieee754_sqrt+0x62>
 8006706:	ee10 2a10 	vmov	r2, s0
 800670a:	462b      	mov	r3, r5
 800670c:	ee10 0a10 	vmov	r0, s0
 8006710:	f7f9 fd66 	bl	80001e0 <__aeabi_dsub>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	f7fa f844 	bl	80007a4 <__aeabi_ddiv>
 800671c:	e7e6      	b.n	80066ec <__ieee754_sqrt+0x30>
 800671e:	1509      	asrs	r1, r1, #20
 8006720:	d076      	beq.n	8006810 <__ieee754_sqrt+0x154>
 8006722:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006726:	07ce      	lsls	r6, r1, #31
 8006728:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800672c:	bf5e      	ittt	pl
 800672e:	0fda      	lsrpl	r2, r3, #31
 8006730:	005b      	lslpl	r3, r3, #1
 8006732:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006736:	0fda      	lsrs	r2, r3, #31
 8006738:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800673c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006740:	2000      	movs	r0, #0
 8006742:	106d      	asrs	r5, r5, #1
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	f04f 0e16 	mov.w	lr, #22
 800674a:	4684      	mov	ip, r0
 800674c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006750:	eb0c 0401 	add.w	r4, ip, r1
 8006754:	4294      	cmp	r4, r2
 8006756:	bfde      	ittt	le
 8006758:	1b12      	suble	r2, r2, r4
 800675a:	eb04 0c01 	addle.w	ip, r4, r1
 800675e:	1840      	addle	r0, r0, r1
 8006760:	0052      	lsls	r2, r2, #1
 8006762:	f1be 0e01 	subs.w	lr, lr, #1
 8006766:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800676a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800676e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006772:	d1ed      	bne.n	8006750 <__ieee754_sqrt+0x94>
 8006774:	4671      	mov	r1, lr
 8006776:	2720      	movs	r7, #32
 8006778:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800677c:	4562      	cmp	r2, ip
 800677e:	eb04 060e 	add.w	r6, r4, lr
 8006782:	dc02      	bgt.n	800678a <__ieee754_sqrt+0xce>
 8006784:	d113      	bne.n	80067ae <__ieee754_sqrt+0xf2>
 8006786:	429e      	cmp	r6, r3
 8006788:	d811      	bhi.n	80067ae <__ieee754_sqrt+0xf2>
 800678a:	2e00      	cmp	r6, #0
 800678c:	eb06 0e04 	add.w	lr, r6, r4
 8006790:	da43      	bge.n	800681a <__ieee754_sqrt+0x15e>
 8006792:	f1be 0f00 	cmp.w	lr, #0
 8006796:	db40      	blt.n	800681a <__ieee754_sqrt+0x15e>
 8006798:	f10c 0801 	add.w	r8, ip, #1
 800679c:	eba2 020c 	sub.w	r2, r2, ip
 80067a0:	429e      	cmp	r6, r3
 80067a2:	bf88      	it	hi
 80067a4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80067a8:	1b9b      	subs	r3, r3, r6
 80067aa:	4421      	add	r1, r4
 80067ac:	46c4      	mov	ip, r8
 80067ae:	0052      	lsls	r2, r2, #1
 80067b0:	3f01      	subs	r7, #1
 80067b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80067b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80067ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067be:	d1dd      	bne.n	800677c <__ieee754_sqrt+0xc0>
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d006      	beq.n	80067d2 <__ieee754_sqrt+0x116>
 80067c4:	1c4c      	adds	r4, r1, #1
 80067c6:	bf13      	iteet	ne
 80067c8:	3101      	addne	r1, #1
 80067ca:	3001      	addeq	r0, #1
 80067cc:	4639      	moveq	r1, r7
 80067ce:	f021 0101 	bicne.w	r1, r1, #1
 80067d2:	1043      	asrs	r3, r0, #1
 80067d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80067d8:	0849      	lsrs	r1, r1, #1
 80067da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80067de:	07c2      	lsls	r2, r0, #31
 80067e0:	bf48      	it	mi
 80067e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80067e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80067ea:	460c      	mov	r4, r1
 80067ec:	463d      	mov	r5, r7
 80067ee:	e77f      	b.n	80066f0 <__ieee754_sqrt+0x34>
 80067f0:	0ada      	lsrs	r2, r3, #11
 80067f2:	3815      	subs	r0, #21
 80067f4:	055b      	lsls	r3, r3, #21
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	d0fa      	beq.n	80067f0 <__ieee754_sqrt+0x134>
 80067fa:	02d7      	lsls	r7, r2, #11
 80067fc:	d50a      	bpl.n	8006814 <__ieee754_sqrt+0x158>
 80067fe:	f1c1 0420 	rsb	r4, r1, #32
 8006802:	fa23 f404 	lsr.w	r4, r3, r4
 8006806:	1e4d      	subs	r5, r1, #1
 8006808:	408b      	lsls	r3, r1
 800680a:	4322      	orrs	r2, r4
 800680c:	1b41      	subs	r1, r0, r5
 800680e:	e788      	b.n	8006722 <__ieee754_sqrt+0x66>
 8006810:	4608      	mov	r0, r1
 8006812:	e7f0      	b.n	80067f6 <__ieee754_sqrt+0x13a>
 8006814:	0052      	lsls	r2, r2, #1
 8006816:	3101      	adds	r1, #1
 8006818:	e7ef      	b.n	80067fa <__ieee754_sqrt+0x13e>
 800681a:	46e0      	mov	r8, ip
 800681c:	e7be      	b.n	800679c <__ieee754_sqrt+0xe0>
 800681e:	bf00      	nop
 8006820:	7ff00000 	.word	0x7ff00000
 8006824:	00000000 	.word	0x00000000

08006828 <atan>:
 8006828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	ec55 4b10 	vmov	r4, r5, d0
 8006830:	4bc3      	ldr	r3, [pc, #780]	; (8006b40 <atan+0x318>)
 8006832:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006836:	429e      	cmp	r6, r3
 8006838:	46ab      	mov	fp, r5
 800683a:	dd18      	ble.n	800686e <atan+0x46>
 800683c:	4bc1      	ldr	r3, [pc, #772]	; (8006b44 <atan+0x31c>)
 800683e:	429e      	cmp	r6, r3
 8006840:	dc01      	bgt.n	8006846 <atan+0x1e>
 8006842:	d109      	bne.n	8006858 <atan+0x30>
 8006844:	b144      	cbz	r4, 8006858 <atan+0x30>
 8006846:	4622      	mov	r2, r4
 8006848:	462b      	mov	r3, r5
 800684a:	4620      	mov	r0, r4
 800684c:	4629      	mov	r1, r5
 800684e:	f7f9 fcc9 	bl	80001e4 <__adddf3>
 8006852:	4604      	mov	r4, r0
 8006854:	460d      	mov	r5, r1
 8006856:	e006      	b.n	8006866 <atan+0x3e>
 8006858:	f1bb 0f00 	cmp.w	fp, #0
 800685c:	f300 8131 	bgt.w	8006ac2 <atan+0x29a>
 8006860:	a59b      	add	r5, pc, #620	; (adr r5, 8006ad0 <atan+0x2a8>)
 8006862:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006866:	ec45 4b10 	vmov	d0, r4, r5
 800686a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686e:	4bb6      	ldr	r3, [pc, #728]	; (8006b48 <atan+0x320>)
 8006870:	429e      	cmp	r6, r3
 8006872:	dc14      	bgt.n	800689e <atan+0x76>
 8006874:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006878:	429e      	cmp	r6, r3
 800687a:	dc0d      	bgt.n	8006898 <atan+0x70>
 800687c:	a396      	add	r3, pc, #600	; (adr r3, 8006ad8 <atan+0x2b0>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	ee10 0a10 	vmov	r0, s0
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 fcac 	bl	80001e4 <__adddf3>
 800688c:	4baf      	ldr	r3, [pc, #700]	; (8006b4c <atan+0x324>)
 800688e:	2200      	movs	r2, #0
 8006890:	f7fa f8ee 	bl	8000a70 <__aeabi_dcmpgt>
 8006894:	2800      	cmp	r0, #0
 8006896:	d1e6      	bne.n	8006866 <atan+0x3e>
 8006898:	f04f 3aff 	mov.w	sl, #4294967295
 800689c:	e02b      	b.n	80068f6 <atan+0xce>
 800689e:	f000 f963 	bl	8006b68 <fabs>
 80068a2:	4bab      	ldr	r3, [pc, #684]	; (8006b50 <atan+0x328>)
 80068a4:	429e      	cmp	r6, r3
 80068a6:	ec55 4b10 	vmov	r4, r5, d0
 80068aa:	f300 80bf 	bgt.w	8006a2c <atan+0x204>
 80068ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80068b2:	429e      	cmp	r6, r3
 80068b4:	f300 80a0 	bgt.w	80069f8 <atan+0x1d0>
 80068b8:	ee10 2a10 	vmov	r2, s0
 80068bc:	ee10 0a10 	vmov	r0, s0
 80068c0:	462b      	mov	r3, r5
 80068c2:	4629      	mov	r1, r5
 80068c4:	f7f9 fc8e 	bl	80001e4 <__adddf3>
 80068c8:	4ba0      	ldr	r3, [pc, #640]	; (8006b4c <atan+0x324>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	f7f9 fc88 	bl	80001e0 <__aeabi_dsub>
 80068d0:	2200      	movs	r2, #0
 80068d2:	4606      	mov	r6, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068da:	4620      	mov	r0, r4
 80068dc:	4629      	mov	r1, r5
 80068de:	f7f9 fc81 	bl	80001e4 <__adddf3>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4630      	mov	r0, r6
 80068e8:	4639      	mov	r1, r7
 80068ea:	f7f9 ff5b 	bl	80007a4 <__aeabi_ddiv>
 80068ee:	f04f 0a00 	mov.w	sl, #0
 80068f2:	4604      	mov	r4, r0
 80068f4:	460d      	mov	r5, r1
 80068f6:	4622      	mov	r2, r4
 80068f8:	462b      	mov	r3, r5
 80068fa:	4620      	mov	r0, r4
 80068fc:	4629      	mov	r1, r5
 80068fe:	f7f9 fe27 	bl	8000550 <__aeabi_dmul>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4680      	mov	r8, r0
 8006908:	4689      	mov	r9, r1
 800690a:	f7f9 fe21 	bl	8000550 <__aeabi_dmul>
 800690e:	a374      	add	r3, pc, #464	; (adr r3, 8006ae0 <atan+0x2b8>)
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	4606      	mov	r6, r0
 8006916:	460f      	mov	r7, r1
 8006918:	f7f9 fe1a 	bl	8000550 <__aeabi_dmul>
 800691c:	a372      	add	r3, pc, #456	; (adr r3, 8006ae8 <atan+0x2c0>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f7f9 fc5f 	bl	80001e4 <__adddf3>
 8006926:	4632      	mov	r2, r6
 8006928:	463b      	mov	r3, r7
 800692a:	f7f9 fe11 	bl	8000550 <__aeabi_dmul>
 800692e:	a370      	add	r3, pc, #448	; (adr r3, 8006af0 <atan+0x2c8>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fc56 	bl	80001e4 <__adddf3>
 8006938:	4632      	mov	r2, r6
 800693a:	463b      	mov	r3, r7
 800693c:	f7f9 fe08 	bl	8000550 <__aeabi_dmul>
 8006940:	a36d      	add	r3, pc, #436	; (adr r3, 8006af8 <atan+0x2d0>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fc4d 	bl	80001e4 <__adddf3>
 800694a:	4632      	mov	r2, r6
 800694c:	463b      	mov	r3, r7
 800694e:	f7f9 fdff 	bl	8000550 <__aeabi_dmul>
 8006952:	a36b      	add	r3, pc, #428	; (adr r3, 8006b00 <atan+0x2d8>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 fc44 	bl	80001e4 <__adddf3>
 800695c:	4632      	mov	r2, r6
 800695e:	463b      	mov	r3, r7
 8006960:	f7f9 fdf6 	bl	8000550 <__aeabi_dmul>
 8006964:	a368      	add	r3, pc, #416	; (adr r3, 8006b08 <atan+0x2e0>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f7f9 fc3b 	bl	80001e4 <__adddf3>
 800696e:	4642      	mov	r2, r8
 8006970:	464b      	mov	r3, r9
 8006972:	f7f9 fded 	bl	8000550 <__aeabi_dmul>
 8006976:	a366      	add	r3, pc, #408	; (adr r3, 8006b10 <atan+0x2e8>)
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	4680      	mov	r8, r0
 800697e:	4689      	mov	r9, r1
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	f7f9 fde4 	bl	8000550 <__aeabi_dmul>
 8006988:	a363      	add	r3, pc, #396	; (adr r3, 8006b18 <atan+0x2f0>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fc27 	bl	80001e0 <__aeabi_dsub>
 8006992:	4632      	mov	r2, r6
 8006994:	463b      	mov	r3, r7
 8006996:	f7f9 fddb 	bl	8000550 <__aeabi_dmul>
 800699a:	a361      	add	r3, pc, #388	; (adr r3, 8006b20 <atan+0x2f8>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fc1e 	bl	80001e0 <__aeabi_dsub>
 80069a4:	4632      	mov	r2, r6
 80069a6:	463b      	mov	r3, r7
 80069a8:	f7f9 fdd2 	bl	8000550 <__aeabi_dmul>
 80069ac:	a35e      	add	r3, pc, #376	; (adr r3, 8006b28 <atan+0x300>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fc15 	bl	80001e0 <__aeabi_dsub>
 80069b6:	4632      	mov	r2, r6
 80069b8:	463b      	mov	r3, r7
 80069ba:	f7f9 fdc9 	bl	8000550 <__aeabi_dmul>
 80069be:	a35c      	add	r3, pc, #368	; (adr r3, 8006b30 <atan+0x308>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fc0c 	bl	80001e0 <__aeabi_dsub>
 80069c8:	4632      	mov	r2, r6
 80069ca:	463b      	mov	r3, r7
 80069cc:	f7f9 fdc0 	bl	8000550 <__aeabi_dmul>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4640      	mov	r0, r8
 80069d6:	4649      	mov	r1, r9
 80069d8:	f7f9 fc04 	bl	80001e4 <__adddf3>
 80069dc:	4622      	mov	r2, r4
 80069de:	462b      	mov	r3, r5
 80069e0:	f7f9 fdb6 	bl	8000550 <__aeabi_dmul>
 80069e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	d14b      	bne.n	8006a86 <atan+0x25e>
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7f9 fbf5 	bl	80001e0 <__aeabi_dsub>
 80069f6:	e72c      	b.n	8006852 <atan+0x2a>
 80069f8:	ee10 0a10 	vmov	r0, s0
 80069fc:	4b53      	ldr	r3, [pc, #332]	; (8006b4c <atan+0x324>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7f9 fbed 	bl	80001e0 <__aeabi_dsub>
 8006a06:	4b51      	ldr	r3, [pc, #324]	; (8006b4c <atan+0x324>)
 8006a08:	4606      	mov	r6, r0
 8006a0a:	460f      	mov	r7, r1
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 fbe7 	bl	80001e4 <__adddf3>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7f9 fec1 	bl	80007a4 <__aeabi_ddiv>
 8006a22:	f04f 0a01 	mov.w	sl, #1
 8006a26:	4604      	mov	r4, r0
 8006a28:	460d      	mov	r5, r1
 8006a2a:	e764      	b.n	80068f6 <atan+0xce>
 8006a2c:	4b49      	ldr	r3, [pc, #292]	; (8006b54 <atan+0x32c>)
 8006a2e:	429e      	cmp	r6, r3
 8006a30:	da1d      	bge.n	8006a6e <atan+0x246>
 8006a32:	ee10 0a10 	vmov	r0, s0
 8006a36:	4b48      	ldr	r3, [pc, #288]	; (8006b58 <atan+0x330>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f7f9 fbd0 	bl	80001e0 <__aeabi_dsub>
 8006a40:	4b45      	ldr	r3, [pc, #276]	; (8006b58 <atan+0x330>)
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	2200      	movs	r2, #0
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f7f9 fd80 	bl	8000550 <__aeabi_dmul>
 8006a50:	4b3e      	ldr	r3, [pc, #248]	; (8006b4c <atan+0x324>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	f7f9 fbc6 	bl	80001e4 <__adddf3>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	4639      	mov	r1, r7
 8006a60:	f7f9 fea0 	bl	80007a4 <__aeabi_ddiv>
 8006a64:	f04f 0a02 	mov.w	sl, #2
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	e743      	b.n	80068f6 <atan+0xce>
 8006a6e:	462b      	mov	r3, r5
 8006a70:	ee10 2a10 	vmov	r2, s0
 8006a74:	4939      	ldr	r1, [pc, #228]	; (8006b5c <atan+0x334>)
 8006a76:	2000      	movs	r0, #0
 8006a78:	f7f9 fe94 	bl	80007a4 <__aeabi_ddiv>
 8006a7c:	f04f 0a03 	mov.w	sl, #3
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	e737      	b.n	80068f6 <atan+0xce>
 8006a86:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <atan+0x338>)
 8006a88:	4e36      	ldr	r6, [pc, #216]	; (8006b64 <atan+0x33c>)
 8006a8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006a8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006a92:	e9da 2300 	ldrd	r2, r3, [sl]
 8006a96:	f7f9 fba3 	bl	80001e0 <__aeabi_dsub>
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	f7f9 fb9f 	bl	80001e0 <__aeabi_dsub>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006aaa:	f7f9 fb99 	bl	80001e0 <__aeabi_dsub>
 8006aae:	f1bb 0f00 	cmp.w	fp, #0
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	460d      	mov	r5, r1
 8006ab6:	f6bf aed6 	bge.w	8006866 <atan+0x3e>
 8006aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006abe:	461d      	mov	r5, r3
 8006ac0:	e6d1      	b.n	8006866 <atan+0x3e>
 8006ac2:	a51d      	add	r5, pc, #116	; (adr r5, 8006b38 <atan+0x310>)
 8006ac4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ac8:	e6cd      	b.n	8006866 <atan+0x3e>
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w
 8006ad0:	54442d18 	.word	0x54442d18
 8006ad4:	bff921fb 	.word	0xbff921fb
 8006ad8:	8800759c 	.word	0x8800759c
 8006adc:	7e37e43c 	.word	0x7e37e43c
 8006ae0:	e322da11 	.word	0xe322da11
 8006ae4:	3f90ad3a 	.word	0x3f90ad3a
 8006ae8:	24760deb 	.word	0x24760deb
 8006aec:	3fa97b4b 	.word	0x3fa97b4b
 8006af0:	a0d03d51 	.word	0xa0d03d51
 8006af4:	3fb10d66 	.word	0x3fb10d66
 8006af8:	c54c206e 	.word	0xc54c206e
 8006afc:	3fb745cd 	.word	0x3fb745cd
 8006b00:	920083ff 	.word	0x920083ff
 8006b04:	3fc24924 	.word	0x3fc24924
 8006b08:	5555550d 	.word	0x5555550d
 8006b0c:	3fd55555 	.word	0x3fd55555
 8006b10:	2c6a6c2f 	.word	0x2c6a6c2f
 8006b14:	bfa2b444 	.word	0xbfa2b444
 8006b18:	52defd9a 	.word	0x52defd9a
 8006b1c:	3fadde2d 	.word	0x3fadde2d
 8006b20:	af749a6d 	.word	0xaf749a6d
 8006b24:	3fb3b0f2 	.word	0x3fb3b0f2
 8006b28:	fe231671 	.word	0xfe231671
 8006b2c:	3fbc71c6 	.word	0x3fbc71c6
 8006b30:	9998ebc4 	.word	0x9998ebc4
 8006b34:	3fc99999 	.word	0x3fc99999
 8006b38:	54442d18 	.word	0x54442d18
 8006b3c:	3ff921fb 	.word	0x3ff921fb
 8006b40:	440fffff 	.word	0x440fffff
 8006b44:	7ff00000 	.word	0x7ff00000
 8006b48:	3fdbffff 	.word	0x3fdbffff
 8006b4c:	3ff00000 	.word	0x3ff00000
 8006b50:	3ff2ffff 	.word	0x3ff2ffff
 8006b54:	40038000 	.word	0x40038000
 8006b58:	3ff80000 	.word	0x3ff80000
 8006b5c:	bff00000 	.word	0xbff00000
 8006b60:	08006c08 	.word	0x08006c08
 8006b64:	08006be8 	.word	0x08006be8

08006b68 <fabs>:
 8006b68:	ec51 0b10 	vmov	r0, r1, d0
 8006b6c:	ee10 2a10 	vmov	r2, s0
 8006b70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b74:	ec43 2b10 	vmov	d0, r2, r3
 8006b78:	4770      	bx	lr
	...

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
